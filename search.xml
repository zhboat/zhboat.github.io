<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Django笔记(2)</title>
      <link href="/Django%E7%AC%94%E8%AE%B0-2/"/>
      <url>/Django%E7%AC%94%E8%AE%B0-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django笔记(1)</title>
      <link href="/Django%E7%AC%94%E8%AE%B0-1/"/>
      <url>/Django%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<p>记录学习Django的过程</p><a id="more"></a><table><thead><tr><th>System: MacOS 12.0</th></tr></thead><tbody><tr><td>Python: 3.8.9</td></tr><tr><td>Django: 2.2.1</td></tr></tbody></table><h2 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ul><li><p>使用PyCharm</p><p>新建Django项目<code>File/New Project/Django</code></p><p>如果没有提前安装Django则会自动安装最新版</p></li><li><p>命令行</p><p>创建项目命令<code>django-admin startproject 项目名</code></p><p>切换到项目目录</p><p>启动项目<code>python mange.py runserver</code></p></li></ul><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>默认端口为8000</p><h4 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h4><ul><li><p>PyCharm</p><p>编辑项目,修改Host:Port</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-21_19:27.png" alt="11-21_19:27"></p></li><li><p>命令行运行</p><p><code>python mange.py runserver ip:指定端口号</code></p></li></ul><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>一切就绪后通过访问<code>127.0.0.1:8000</code>就能看到Django初始界面</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-21_22:03.png" alt="11-21_22:03"></p><h3 id="Django目录结构"><a href="#Django目录结构" class="headerlink" title="Django目录结构"></a>Django目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|-- 项目名</span><br><span class="line">|  |-- __init__.py --&gt; 声明该项目是Python包</span><br><span class="line">|  |-- setting.py  --&gt; 项目的配置文件</span><br><span class="line">|  |-- urls.py     --&gt; URL声明,管理资源地址</span><br><span class="line">|  |-- wsgi.py     --&gt; django自带的服务器</span><br><span class="line">|  |-- views.py    --&gt; 名称可自定义的视图文件</span><br><span class="line">db.sqlite3  --&gt; 文本型数据库</span><br><span class="line">templates   --&gt; 返回页面</span><br><span class="line">static      --&gt; 静态文件(图片,css,js等)</span><br><span class="line">manage.py   --&gt; 项目运行文件</span><br></pre></td></tr></table></figure><h3 id="Views-py"><a href="#Views-py" class="headerlink" title="Views.py"></a>Views.py</h3><ol><li>函数名称: 见名知意,遵循标识符规则。</li><li>request参数: Django 将请求的所有的内容都封装到对象中,然后传递给视图函数的第一个参数。</li><li>返回值: 必须要有响应对象,可以是HttpResponse 也可以是子类。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="string">'''</span></span><br><span class="line"><span class="string">  作用: 所有的逻辑判断都在视图函数中完成</span></span><br><span class="line"><span class="string">  # 例如返回html页面,操作数据库等等</span></span><br><span class="line"><span class="string">  request参数: Django将请求的所有内容都封装到对象中,然后传递给视图函数的第一个参数</span></span><br><span class="line"><span class="string">  return: 必须要有响应对象,可以是HttpResponse也可以是子类</span></span><br><span class="line"><span class="string">  HttpResponse对象可以返回简单的字符串</span></span><br><span class="line"><span class="string">  '''</span></span><br><span class="line">  print(request.method)</span><br><span class="line">  print(request.headers)</span><br><span class="line">    print(request.path_info)</span><br><span class="line">  print(request.get_full_path())</span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">'index'</span>)</span><br></pre></td></tr></table></figure><h4 id="Render函数"><a href="#Render函数" class="headerlink" title="Render函数"></a>Render函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入函数</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="comment"># 返回页面</span></span><br><span class="line">  <span class="comment"># render函数的第一个参数是视图函数的第一个参数</span></span><br><span class="line">  <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>) <span class="comment"># 该html会从templates文件夹下寻找</span></span><br></pre></td></tr></table></figure><h3 id="Urls-py"><a href="#Urls-py" class="headerlink" title="Urls.py"></a>Urls.py</h3><p>作用: 提供URL到视图函数之间的一个映射关系</p><p>URL先找到路由,然后路由再找到视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 第一个参数任意,第二个参数是函数名称(不是调用函数)</span></span><br><span class="line">    path(<span class="string">'hello/'</span>, hello)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>在项目包下创建一个views.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入HttpResponse模块</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'Hello,World'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">返回值也可以写成:</span></span><br><span class="line"><span class="string">response = HttpResponse('Hello,World')</span></span><br><span class="line"><span class="string">return response</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>修改urls.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从views导入hello函数</span></span><br><span class="line"><span class="keyword">from</span> Django_Learn <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'hello/'</span>, views.hello),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">一个函数对应多个路由</span></span><br><span class="line"><span class="string">path('hello1/', hello),</span></span><br><span class="line"><span class="string">path('hello2/', hello),</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">项目首页显示</span></span><br><span class="line"><span class="string">path('', index),</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>从浏览器访问<code>127.0.0.1:8000/hello</code>即可看到HelloWorld</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-23_15:54.png" alt="11-23_15:54"></p><h3 id="路由使用正则表达式"><a href="#路由使用正则表达式" class="headerlink" title="路由使用正则表达式"></a>路由使用正则表达式</h3><p>目的: 提高代码的复用率,减少代码冗余</p><h4 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入re_path</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r'^\d+/$'</span>, views.hello1), <span class="comment"># 使用正则表达式</span></span><br><span class="line">    re_path(<span class="string">r'^hello/(w+)/$'</span>, views.hello2), <span class="comment"># 分组匹配</span></span><br><span class="line">    re_path(<span class="string">r'^(?P&lt;page&gt;\d+)/$'</span>, views.hello3), <span class="comment">#分组命名匹配 格式:(?P&lt;组名称&gt;正则表达式)。</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 值得注意的是: 分组和分组命令不能混用,一个路由中不能同时出现两种方法</span></span><br></pre></td></tr></table></figure><h4 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用正则匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello1</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'hello 1...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello2</span><span class="params">(request, args)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  :param request: </span></span><br><span class="line"><span class="string">  :param args: 名称任意。 </span></span><br><span class="line"><span class="string">  :return:</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">    print(args)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'hello 2...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组命名匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello12</span><span class="params">(request, page)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  :param request:</span></span><br><span class="line"><span class="string">  :param page: 参数名称必须要和组名称相同。 </span></span><br><span class="line"><span class="string">  :return:</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  print(page)</span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">'hello 3...'</span>)</span><br></pre></td></tr></table></figure><h3 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h3><p>在此文件夹下可以创建静态html文件</p><p>如果使用命令行创建项目,则需要手动创建此文件夹</p><p>且需要修改setting.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)],</span><br><span class="line">     &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="页面显示数据"><a href="#页面显示数据" class="headerlink" title="页面显示数据"></a>页面显示数据</h3><p>数据的替换是在内存中完成，然后将最终的替换完成的页面，返回给浏览器，浏览器再进行展示。</p><ul><li><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># 相当于从数据库中获取的数据 </span></span><br><span class="line">  info_list = [</span><br><span class="line">          &#123;<span class="string">'name'</span>: <span class="string">'zs'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'name'</span>: <span class="string">'lsi'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'name'</span>: <span class="string">'wangw'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment"># 第三个值:类型是字典。key 任意，value 为要在页面上显示的值</span></span><br><span class="line">  <span class="keyword">return</span> render(request, <span class="string">'index2.html'</span>, &#123;<span class="string">'info_list'</span>: info_list&#125;)</span><br></pre></td></tr></table></figure></li><li><p>urls.py</p><p>添加路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">path(&#39;index2&#x2F;&#39;, views.index2),</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>index2.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123; info_list &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-23_17:49.png" alt="11-23_17:49"></p></li><li><p>locals()函数</p><p>它返回对所有局部变量的名称与值进行映射,即包括<strong>所有</strong>的局部变量,不用再重新定义一遍临时变量</p><p>故,可以将上面views.py结尾处<code>{&#39;info_list&#39;: info_list}</code>改为<code>locals()</code></p></li></ul><h3 id="页面显示不同类型的数据"><a href="#页面显示不同类型的数据" class="headerlink" title="页面显示不同类型的数据"></a>页面显示不同类型的数据</h3><h4 id="列表数据"><a href="#列表数据" class="headerlink" title="列表数据"></a>列表数据</h4><ul><li><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index3</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 返回列表</span></span><br><span class="line">    hero_list = [<span class="string">'枣庄王'</span>, <span class="string">'石家庄赵子龙'</span>, <span class="string">'包头吕布'</span>, <span class="string">'小鲁班'</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index3.html'</span>, locals())</span><br></pre></td></tr></table></figure></li><li><p>urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">path(&#39;index3&#x2F;&#39;, views.index3),</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>index3.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;&#123; hero_list &#125;&#125;</span><br><span class="line">&#123;# 获取列表中的数据，方法:变量名称.索引 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; hero_list.1&#125;&#125; </span><br><span class="line">&#123;# 石家庄赵子龙 #&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-23_18:09.png" alt="11-23_18:09"></p></li></ul><h4 id="字典数据"><a href="#字典数据" class="headerlink" title="字典数据"></a>字典数据</h4><ul><li><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index4</span><span class="params">(request)</span>:</span>  <span class="comment"># 字典</span></span><br><span class="line">    user_info = &#123;<span class="string">'name'</span>: <span class="string">'尼古拉斯-赵四'</span>, <span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index4.html'</span>, locals())</span><br></pre></td></tr></table></figure></li><li><p>urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">path(&#39;index4&#x2F;&#39;, views.index4),</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>index4.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;&#123; user_info &#125;&#125;</span><br><span class="line">&#123;# 获取字典中的value，方法:变量名称.key #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">用户名是：&#123;&#123; user_info.name &#125;&#125;，今年：&#123;&#123; user_info.age &#125;&#125;岁，性别为：&#123;&#123; user_info.gender &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>  <img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-23_18:13.png" alt="11-23_18:13"></p></li></ul><h4 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h4><ul><li><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index4</span><span class="params">(request)</span>:</span>  <span class="comment"># 字典</span></span><br><span class="line">    user_info = &#123;<span class="string">'name'</span>: <span class="string">'尼古拉斯-赵四'</span>, <span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组合型</span></span><br><span class="line">    user_info_list = [</span><br><span class="line">        &#123;<span class="string">'name'</span>: <span class="string">'赵四'</span>, <span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'刘能'</span>, <span class="string">'age'</span>: <span class="number">30</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'宋小宝'</span>, <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">                                                                                             <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    person_info = &#123;<span class="string">'name'</span>: <span class="string">'于谦'</span>, <span class="string">'age'</span>: <span class="number">29</span>, <span class="string">'hobby'</span>: [<span class="string">'抽烟'</span>, <span class="string">'喝酒'</span>, <span class="string">'烫头'</span>]&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index4.html'</span>, locals())</span><br></pre></td></tr></table></figure></li><li><p>index4.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;&#123; user_info &#125;&#125;</span><br><span class="line">&#123;# 获取字典中的数据，方法:变量名称.key #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">用户名是：&#123;&#123; user_info.name &#125;&#125;，今年：&#123;&#123; user_info.age &#125;&#125;岁，性别为：&#123;&#123; user_info.gender &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;# 获取列表中字典中的值 #&#125;</span><br><span class="line">    &#123;&#123; user_info_list &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    索引为1的字典中key为name的名字是：&#123;&#123; user_info_list.1.name &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    索引为0的字典中key为name的名字是：&#123;&#123; user_info_list.0.name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;# 获取字典中列表中的值 #&#125;</span><br><span class="line">    &#123;&#123; person_info &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    字典中的列表索引为2的爱好是：&#123;&#123; person_info.hobby.2 &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-23_18:35.png" alt="11-23_18:35"></p></li></ul><h4 id="对象数据"><a href="#对象数据" class="headerlink" title="对象数据"></a>对象数据</h4><ul><li><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'爱吃骨头'</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>def index5(request):</p><pre><code># 创建对象dog_obj = Dog(&apos;大黄&apos;)return render(request, &apos;index5.html&apos;, locals())</code></pre></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- urls.py</span><br></pre></td></tr></table></figure><p>  …<br>  path(‘index5/‘, views.index5),<br>  …</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- index5.html</span><br><span class="line">&#96;&#96;&#96;html</span><br><span class="line">...</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#123;# 获取对象中的属性值和调用方法#&#125;</span><br><span class="line">&#123;&#123; dog_obj &#125;&#125; &lt;br&gt;</span><br><span class="line">&#123;# 获取属性: 对象名称.属性名称#&#125;</span><br><span class="line">&#123;&#123; dog_obj.name &#125;&#125;&lt;br&#x2F;&gt;</span><br><span class="line">&#123;# 调用方法:对象名称.方法名称#&#125;</span><br><span class="line">&#123;&#123; dog_obj.eat &#125;&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>  <img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-23_18:43.png" alt="11-23_18:43"></p><h3 id="标签-Tags"><a href="#标签-Tags" class="headerlink" title="标签(Tags)"></a>标签(Tags)</h3><p>作用: 可以做一些简单的业务逻辑。</p><p>格式:  {% 标签名称 %} {% end标签名称 %} </p><h4 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h4><ul><li><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span><span class="params">(request)</span>:</span></span><br><span class="line">    age = <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'tag.html'</span>, locals())</span><br></pre></td></tr></table></figure></li><li><p>urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">path(&#39;tag&#x2F;&#39;, views.tag),</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>tag.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;# 单分支 #&#125;</span><br><span class="line">&#123;% if age <span class="tag">&lt; <span class="attr">18</span> %&#125;</span></span><br><span class="line"><span class="tag">    如果年龄小于<span class="attr">18</span>岁，则输出如下内容：</span></span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        好好学习，天天向上</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h4 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h4><ul><li><p>tag.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">&#123;# 双分支 #&#125;</span><br><span class="line">&#123;% if age <span class="tag">&lt; <span class="attr">16</span>  %&#125;</span></span><br><span class="line"><span class="tag">    如果年龄小于<span class="attr">16</span>岁，则输出如下内容：</span></span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        好好学习，天天向上</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    如果年龄大于16岁，则输出如下内容：</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        欢迎来到成年人的世界</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h4 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h4><ul><li><p>tag.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">&#123;# 多分支 #&#125;</span><br><span class="line">&#123;% if age &gt; 0 and age <span class="tag">&lt; <span class="attr">18</span> %&#125;</span></span><br><span class="line">    &lt;h2&gt;我是祖国的花朵...&lt;/h2&gt;</span><br><span class="line">&#123;% elif age &gt;= 18 and age <span class="tag">&lt;<span class="name">=</span> <span class="attr">30</span> %&#125;</span></span><br><span class="line">    &lt;h2&gt;我是小鲜肉...&lt;/h2&gt;</span><br><span class="line">&#123;% elif age &gt; 30 and age <span class="tag">&lt;<span class="name">=</span> <span class="attr">50</span> %&#125;</span></span><br><span class="line">    &lt;h2&gt;我是老腊肉...&lt;/h2&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是....<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-23_18:58.png" alt="11-23_18:58"></p></li></ul><h4 id="ifequal"><a href="#ifequal" class="headerlink" title="ifequal"></a>ifequal</h4><ul><li><p>tag.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">&#123;# ifequal #&#125;</span><br><span class="line">如果变量值和常量相同则执行if体，否则不执行。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;% ifequal age  16 %&#125;</span><br><span class="line">    如果年龄为16则输出如下内容：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>my age is &#123;&#123; age &#125;&#125;...<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;% endifequal %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-23_19:03.png" alt="11-23_19:03"></p></li></ul><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for hero in  hero_list%&#125;</span><br><span class="line">    &#123;&#123; hero &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h5 id="forloop"><a href="#forloop" class="headerlink" title="forloop"></a>forloop</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for hero in hero_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        &#123;#  &#123; forloop.counter &#125;&#125; &#123;# 计数 #&#125;</span><br><span class="line">        &#123;#  &#123; forloop.revcounter &#125;&#125; &#123;# 倒序计数 #&#125;</span><br><span class="line">        &#123;#  &#123; forloop.revcounter0 &#125;&#125; &#123;# 倒序计数至0 #&#125;</span><br><span class="line">        &#123;#  &#123; forloop.first &#125;&#125; &#123;# 第一个为True，其他为False #&#125;</span><br><span class="line">        &#123;#  &#123; forloop.last &#125;&#125; &#123;# 最后一个为True，其他为False #&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        &#123;&#123; hero &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-23_19:10.png" alt="11-23_19:10"></p><h5 id="for…empty"><a href="#for…empty" class="headerlink" title="for…empty"></a>for…empty</h5><p>如果变量有值则执行循环，如果变量没有值，则执行 empty 中对应的内容。</p><ul><li><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index4</span><span class="params">(request)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    null_list = []</span><br><span class="line">    ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>index4.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">&#123;% for nothing in null_list %&#125;</span><br><span class="line">    &#123;&#123; nothing &#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line">购物车空空的哦~，去看看心仪的商品吧~</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.jd.com"</span>&gt;</span>去购物 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-23_21:55.png" alt="11-23_21:55"></p></li></ul><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>需要在项目根目录自行创建</p><p>且需要修改setting.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"><span class="comment"># 添加如下内容</span></span><br><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">'static'</span>)]</span><br></pre></td></tr></table></figure><ul><li><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">图片展示</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../static/wallpaper.jpg"</span> <span class="attr">width</span>=<span class="string">"546"</span> <span class="attr">height</span>=<span class="string">"364"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-23_22:05.png" alt="11-23_22:05" style="zoom:50%;" /><h5 id="load-static"><a href="#load-static" class="headerlink" title="load static"></a>load static</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'wallpaper.jpg' %&#125;"</span> <span class="attr">alt</span>=<span class="string">"图片展示"</span> <span class="attr">width</span>=<span class="string">"546"</span> <span class="attr">height</span>=<span class="string">"364"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果同上</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>提高代码的重用率</p><ul><li><p>创建父页面<code>base.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;# 相同的代码抽取出来，放到父页面中 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"background-color: orangered ; height: 50px; line-height: 2px; "</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 子页面不同的地方，通过block标签进行，预留位 #&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"background-color: orangered ; height: 50px; line-height: 2px; "</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>创建子页面<code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    继承父类</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>不使用父类代码<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-24_17:20.png" alt="11-24_17:20"></p></li><li><p>创建父页面<code>base.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        &#123;% block title %&#125;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">    header</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">    footer</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>创建子页面<code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block main %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    index...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">    首页</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>可见使用了{% block main %}的h1标签正常显示了,而{% block title %}因为父页面中为空所以不显示</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-24_17:26.png" alt="11-24_17:26"></p></li></ul><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p>提高代码的复用率</p><p>当页面代码相同部分较少,且内容不变,例如每个页面的footer部分</p><ul><li><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>, locals())</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">path(<span class="string">'home/'</span>, views.home),</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>创建<code>home.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    我是home</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% include 'footer.html' %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>创建<code>footer.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    我是footer</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-24_17:37.png" alt="11-24_17:37"></p></li></ul><h4 id="过滤器-Filters"><a href="#过滤器-Filters" class="headerlink" title="过滤器(Filters)"></a>过滤器(Filters)</h4><p>作用: 可以在变量被显示前修改它，过滤器使用管道字符</p><p>过滤器本质: 就是函数</p><p>格式:  `{{ 数据|过滤器:可选参数 }}` </p><ul><li>{{ 数据 |upper }}<p>将数据变成大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 假设name的值为zhangsan</span><br><span class="line">经过过滤器&#123;&#123; name|upper&#125;&#125;输出结果为ZHANGSAN</span><br></pre></td></tr></table></figure></li><li>{{ 数据|lower}}<p>将数据变成小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 假设name的值为ZHANGSAN</span><br><span class="line">经过过滤器&#123;&#123; name|lower&#125;&#125;输出结果为zhangsan</span><br></pre></td></tr></table></figure></li><li>{{ 数据|lower|upper}} <p>先将数据变成小写再变成大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 假设name的值为ZhangSan</span><br><span class="line">经过过滤器&#123;&#123; name|lower|upper&#125;&#125;输出结果为ZHANGSAN</span><br></pre></td></tr></table></figure></li><li><p>addslashes:添加反斜杠到任何反斜杠、单引号或者双引号前面</p></li><li><p>date:按指定的格式字符串参数格式化 date 或者 datetime 对象</p></li><li><p>length:返回变量的长度</p></li><li><p>default:当变量为空或False时提供默认值</p></li><li><p>filesizeformat:以格式显示文件大小,字典返回的是键值对的数量,集合返回的是去重后的长度</p></li><li><p>date:根据给定格式对一个日期变量进行格式化</p></li><li><p>truncatechars:如果字符串包含的字符总个数多于指定的字符数量，那么会被截断掉后面的部分。截断的字符串将以 <strong>…</strong> 结尾。</p></li><li><p>safe:将字符串标记为安全，不需要转义。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;# 格式: &#123;&#123; 数据|过滤器 &#125;&#125; #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>home... 过滤器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;# 已设定msg为hello，msg1为[],link为https://www.baidu.com #&#125;</span><br><span class="line">&#123;&#123; msg &#125;&#125; 转换为大写--&gt; &#123;&#123; msg|upper &#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;# 管道可以传递输出，与Linux管道一样 #&#125;</span><br><span class="line">&#123;&#123; msg &#125;&#125; 转换为大写再转换为小写--&gt;&#123;&#123; msg|upper|lower &#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; msg &#125;&#125; 首字母大写--&gt;&#123;&#123; msg|title &#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; msg1|default:'我是默认值...' &#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;# safe: 将字符串标记为安全，不需要转义。 #&#125;</span><br><span class="line">&#123;&#123; link &#125;&#125; --&gt;&gt; &#123;&#123; link|safe &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-24_18:25.png" alt="11-24_18:25"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS值得安利的软件</title>
      <link href="/MacOS%E5%80%BC%E5%BE%97%E5%AE%89%E5%88%A9%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
      <url>/MacOS%E5%80%BC%E5%BE%97%E5%AE%89%E5%88%A9%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>提升MacOS的实用性(懒癌的自我救赎</p><a id="more"></a><p>首先安利一个比较好用的盗版软件(bushi)下载站</p><p><a href="https://macwk.com/" target="_blank" rel="noopener">MacWk</a></p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_13:59.png" alt="11-14_13:59"></p><p>下列软件都属于我个人觉得不错的软件,顺序不能说明实用性</p><h3 id="0x00-Todesk"><a href="#0x00-Todesk" class="headerlink" title="0x00 Todesk"></a>0x00 Todesk</h3><p><img src="https://www.todesk.com/NewAssets/img/home/logo.png" alt=""></p><p>一款国内不限速多平台的远程桌面,支持数据端到端加密,流畅稳定</p><p>不强制要求登录账号,也不会像TeamViewer误报商用</p><p><img src="https://www.todesk.com/NewAssets/img/download/bg2/14.png" alt=""></p><p>官方地址:<a href="https://www.todesk.com/download.html" target="_blank" rel="noopener">Todesk</a></p><p></p><h3 id="0x01-Lemon"><a href="#0x01-Lemon" class="headerlink" title="0x01 Lemon"></a>0x01 Lemon</h3><p><img src="https://lemon.qq.com/images/lemon/logo.png" alt=""></p><p>鹅厂不愧是苹果的老舔狗了,众多毒瘤软件到苹果平台就老实得让人忘了其开发商来自腾讯</p><p>清理强大足以媲美CleanMyMac</p><p>我是看上了能在状态栏显示系统状态的功能🤣</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_14:14.png" alt="11-14_14:14"></p><p>下载地址:<a href="https://lemon.qq.com/" target="_blank" rel="noopener">官方版</a> | <a href="https://itunes.apple.com/cn/app/tencent-lemon-lite/id1449962996?ls=1&mt=12" target="_blank" rel="noopener">AppStore</a></p><p><h3 id="0x02-Motrix"><a href="#0x02-Motrix" class="headerlink" title="0x02 Motrix"></a>0x02 Motrix</h3><img src="https://s.motrix.app/images/app-icon@2x.png" style="zoom:50;" /><p>基于Aria2的免费开源多平台多线程下载工具,支持HTTP, FTP, BitTorrent, Magnet等协议</p><p><img src="https://s.motrix.app/images/screenshot-task-list-downloading-en@2x.png" alt=""></p><p>多种插件支持主流浏览器</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_14:21.png" alt=""></p><p>官网地址:<a href="https://motrix.app/" target="_blank" rel="noopener">Motrix</a></p><p></p><h3 id="0x03-Mos"><a href="#0x03-Mos" class="headerlink" title="0x03 Mos"></a>0x03 Mos</h3><img src="https://mos.caldis.me/resources/image/logo-big.png" style="zoom:50;" /><p>一个用于在 MacOS 上平滑你的鼠标滚动效果或单独设置滚动方向的小工具, 让你的滚轮爽如触控板(直接复制官网的介绍了😅)</p><p>项目免费开源,用了之后滚轮丝滑流畅</p><p><img src="https://mos.caldis.me/resources/image/cn/PreferencesGeneral.png" alt=""></p><p>下载地址:<a href="https://mos.caldis.me/" target="_blank" rel="noopener">Mos</a> | 或通过命令行<code>brew cask install mos</code></p><p><h3 id="0x04-Better365"><a href="#0x04-Better365" class="headerlink" title="0x04 Better365"></a>0x04 Better365</h3><p>本来是想把它们产品线拿出来一个一个介绍的,碍(懒)于(得)篇(打)幅(字),就直接安利它们网站了</p><p>非常良心的MacOS软件开发团队,旗下所有产品都十分好用</p><p>直至我写文之际,官网已有产品如下</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_14:38.png" alt="11-14_14:38"></p><p>这里不过多阐述,感兴趣可以去他们官网阅览,其多数软件已上架App Store</p><p>官网地址:<a href="https://www.better365.cn/" target="_blank" rel="noopener">better365</a></p><p></p><h3 id="0x05-跃传"><a href="#0x05-跃传" class="headerlink" title="0x05 跃传"></a>0x05 跃传</h3><p>如果你还在头疼Android传输文件到Mac的烦恼,或许它能帮到你</p><p>这是由mokee团队之一的开发者龙猪写的软件,可以通过隔空投送把安卓上的文件发送到Mac上</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_14:53.jpg" alt="11-14_14:53"></p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_14:52.jpg" alt="11-14_14:52"></p><p>下载地址:<a href="https://zhboat.lanzous.com/isG6iidxi3a" target="_blank" rel="noopener">蓝奏云</a></p><p></p><h3 id="0x06-Typora"><a href="#0x06-Typora" class="headerlink" title="0x06 Typora"></a>0x06 Typora</h3><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_14:55.png" alt="11-14_14:55"></p><p>简洁高效的多平台Markdown软件,我博客所有文章都是经由它</p><p>如果你还不了解Markdown语法,可以使用快捷键的方式去写文章</p><p>实时预览可以称得上特色之一,还有诸多小功能能在设置中找到</p><p>自定义主题可以在写文章的时候换种心情(老外的审美还是算了8…..)</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_15:02.png" alt="11-14_15:02"></p><p>下载地址:<a href="https://typora.io/" target="_blank" rel="noopener">typora</a></p><P></p><h3 id="0x07-Xmind"><a href="#0x07-Xmind" class="headerlink" title="0x07 Xmind"></a>0x07 Xmind</h3><p><strong>思如泉涌 • 成竹在图</strong></p><p>XMind 是一个全功能的思维导图和头脑风暴软件，为激发灵感和创意而生。作为一款有效提升工作和生活效率的生产力工具，受到全球百千万用户的青睐。</p><p>在应对需规划的工作时,使用思维导图不仅可以给你带来高效的工作方式,也能整理自己的思路,不仅仅如此,使用它做笔记也是不错的选择</p><p>支持多平台,优点是简洁清爽,功能强大,缺点是价格稍贵</p><p><img src="https://s3.cn-north-1.amazonaws.com.cn/assets.xmind.cn/www/assets/images/home/structures/home-structure-mindmap@2x-929e6e5353.png" alt=""></p><p>下载地址:<a href="https://macwk.com/soft/xmind-2020" target="_blank" rel="noopener">MacWk_Xmind</a></p><h3 id="0x08-Sublime-Text3"><a href="#0x08-Sublime-Text3" class="headerlink" title="0x08 Sublime Text3"></a>0x08 Sublime Text3</h3><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_15:37.png" alt="11-14_15:37"></p><p>在我的Pycharm崩溃的时候它一直是我编译py的顶梁柱…</p><p>当时初用MacOS时抱怨没有一款软件有notepad++的功能,直到我发现了它….</p><p>支持很多插件,我装了个文本对比</p><p>虽说是付费软件,但除了会弹出提示外正常使用就行</p><p>下载地址:<a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">sublime text</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随记</title>
      <link href="/%E9%9A%8F%E8%AE%B0/"/>
      <url>/%E9%9A%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>苹果在11月13号凌晨推送了Big Sur正式版,拖延许久的我为此忙了一下午…</p><a id="more"></a><p>这周因种种事情,导致很早之前就想更新oc的我直至今天才更新</p><p>新买的固态也早早就收货了,以史低价399拿到了500G的西数750,也不枉我觊觎良久</p><p>难得周五这天有空,于是开始下载新版镜像重新安装</p><p>起初其实是打算备份还原来着,想到臃肿的环境和自己错误配置导致系统的小bug,想了想便算罢了</p><p>软件大体倒是不必重新下载,从旧硬盘直接复制到新硬盘就行</p><p>设置各个软件费了我许久的时间,真真是被我强迫症害了</p><p>把软件搞完后一边水群一边完善和更新oc版本</p><p>将博客通过Action重新构建确实挺有先见的,以hexo繁琐的架构迁移一次估计得非老劲</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_01:16.png" alt="11-14_01:16"></p><p>将博客文件夹复制后只需在新系统上装个git就能用了,变相地节省了电脑性能(?) 麻烦之处在于得重新部署密钥</p><p>罢了罢了,时辰不早了,睡也</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_01:15.png" alt="11-14_01:15"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1024</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%8A%82/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<p><font color = 'red'>节日快乐,编码有成!</font></p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/10-24_14:53.jpg" alt="10-24_14:53"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python入门笔记</title>
      <link href="/Python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/Python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><a id="more"></a><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><ul><li><p>标准输出</p><p>语法<code>print(&#39;&#39;,[sep = &#39; &#39;],[end = &#39;\n&#39;],[file = None])</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(</span><br><span class="line">sep&#x3D;&#39; &#39;,输入多个内容的时候，使用的分割符</span><br><span class="line"></span><br><span class="line">end&#x3D;&#39;\n&#39;, 输出默认的结尾是什么--\n--换行符</span><br><span class="line"></span><br><span class="line">file&#x3D;None，将输出的内容从控制台编程输出到文件中--了解 )</span><br></pre></td></tr></table></figure><ul><li><p>标准输入</p><p>语法<code>input()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input(<span class="string">'这是一条输入语句'</span>)</span><br></pre></td></tr></table></figure><p>通过键盘输入一些内容</p></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量名只包含数字,字母,下划线 不能以关键字命名</p><p>不能以数字开头</p><ul><li><p>PEP8命名规范</p><blockquote><p> 1.恒定量(常量)使用全大写与下划线:比如规定的不可更改的变量的值 </p><p> 2.私有变量使用前导下划线和小写,如:_message<br> 3.一般的变量则应该: 全小写,<strong>用下划线隔开</strong> 表示类型的字母放在最前面 作用或要完成的工作则在中间 属于谁 放在最后,<strong>或可省略</strong> 例如: numpy_creat_data_set_test表示的意思是: 该变量是Numpy类型,被创建为一个数据 集,用于测试(test这个函数的内部变量) _</p><p> 4.当一个变量被用于保存于布尔值时,做好使用is或has作为前缀,这样更易于理解 </p><p> 5.当一个变量被用于保存序列时,最好使用复数形式</p><p> 6.当一个变量被用于临时保存时,最好加上temp_的前缀</p><p> 7.当一 个变量被用于作为字典时,应该使用显示名称,如一个用来保存个人地址的变量:person_address</p><p> 8.应当避免使用通用 名称,现有名称(已有名称,变量i,j可以循环使用), 避免关键字,非得使用可以使用后缀下划线</p><p> 9.类名使用驼峰命名法,当 定义的是模块的私有类时,还可能有一个前导下划线。</p></blockquote><ol><li>变量名全小写,单词使用下划线分隔</li><li>表示类型的字母放在最前面</li><li>作用或要完成的工作放在中间</li><li>属于谁放在最后,或可省略</li></ol></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>基础类型可以分为四个类型</p><p>数值类型的复杂度是<code>bool &lt; int &lt; float</code></p><p>在混合类型的表达式中，Python首先将被操作的对象(数字)转换成其中最复杂的操作对象(数字)的类型，然后再 对相同类型的操作对象(数字)进行数学运算</p><p>使用<code>type(变量名)</code>查看变量类型</p><ul><li><p>整型(Int)</p><p>Python对于整型的定义只有int类型</p><p>数值一般为十进制,也可以表示成二进制,八进制,十六进制</p><ol><li>二进制: 以<code>0b</code>或<code>0B</code>开头,后面是二进制数01010</li><li>八进制: 以<code>0o</code>或<code>0O</code>开头,后面是八进制数<code>0 ~ 7</code></li><li>十六进制: 以<code>0x</code>或<code>0X</code>开头,后面是十六进制数<code>0 ~ 9</code> ,<code>a ~ f</code> 或 <code>A ~ F</code></li></ol><p>在编译运行的时候会自动转换成十进制数</p><p>例如<code>int_age = 15</code></p><p>那么<code>type(age)</code>的结果就是int</p></li><li><p>浮点(Float)</p><p>Python对于浮点数的定义只有float类型</p><p>可以省略小数点前或后的0</p><p>取值范围是<code>-10 ^ 308  ~ 10 ^ 308</code>,如若超过取值范围会出现溢出错误</p></li><li><p>布尔(Bool)</p><p>也称作逻辑常量,只有True和False两个值</p><p>其False对应0,True对应非0值(1)</p></li><li><p>复数(Complex)</p><p>表示方式为<code>实部 + 虚部</code>,其虚部以<code>j</code> 或 <code>J</code>作结尾</p><p>可以使用<code>complex()</code>函数创建复数</p><p>复数的运算<code>(2 + 3j) + (2 + 1j)</code>的值是4  + 4j</p></li></ul><h4 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h4><p>组合数据是存储多个基本数据类型的一种数据结构</p><ul><li><p>列表(list)</p><p>列表中的元素类型可以是相同的也可以是不同的</p><p>列表中的元素既可以是基本数据类型也可以是组合数据类型</p><p>语法格式:<code>列表名[元素1,元素2,元素3,元素4]</code></p><p>例:<code>names = [&#39;张三&#39;,&#39;李四&#39;,&#39;王五&#39;]</code></p><p>其数据类型是:<code>&lt;class &#39;list&#39;&gt;</code></p></li><li><p>字典(dict)</p><p>如有<code>key : value</code>组合的数据类型可以使用字典进行储存</p><p><strong>字典的key不能重复</strong></p><p>语法格式:<code>字典名 = {key1:value1,key2:value2}</code></p><p>例:<code>user_info = &#39;姓名&#39;:&#39;张三&#39;,&#39;年龄&#39;:&#39;20&#39;</code></p><p>其数据类型是<code>&lt;class &#39;dict&#39;&gt;</code></p></li><li><p>元组(tuple)</p><p>语法格式:<code>元组名 = (&#39;张三&#39;,&#39;李四&#39;,&#39;王五&#39;)</code></p></li><li><p>集合(set)</p><p><strong>无序的,唯一的,不可变类型</strong></p><p>集合中的元素不保存存储的顺序</p><p>集合中的元素是不能重复的</p><p>集合中的元素是无法被修改的</p><p>语法格式:<code>集合名 = {&#39;张三&#39;,&#39;李四&#39;,&#39;王五&#39;}</code></p></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例(a = b = 5)</th></tr></thead><tbody><tr><td>+</td><td>加号</td><td>两个对象相加 a+b 的结果为10</td></tr><tr><td>-</td><td>减号</td><td>取一个数的负数,或一个数减去另一个数 a - b的结果为-10</td></tr><tr><td>*</td><td>乘号</td><td>两个数相乘或返回一个被重复n次的字符串 a * b的结果为25</td></tr><tr><td>**</td><td>幂运算</td><td>返回a的b次幂,即5^5的结果是3125</td></tr><tr><td>/</td><td>除号</td><td>返回a除以b的结果1.0 返回包含任何余数的浮点结果</td></tr><tr><td>//</td><td>真除运算(floor)</td><td>返回a除以b的结果1 若两数为int则返回int 否则为float类型</td></tr><tr><td>%</td><td>取余</td><td>返回除法的余数a % b的结果为0</td></tr></tbody></table><p>对于字符串而言,加法的操作是让两个字符串连接,乘法的操作是让字符串重复输出n次</p><p>字符串无法做减法运算,除法运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断12是否为偶数</span></span><br><span class="line">x = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"x为偶数"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"x为奇数"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 逆序输出任意三位数</span></span><br><span class="line">y = <span class="number">123</span></span><br><span class="line"><span class="comment"># 取个位数</span></span><br><span class="line">t1 = y % <span class="number">10</span></span><br><span class="line"><span class="comment"># 去十位数</span></span><br><span class="line">t2 = y // <span class="number">10</span> % <span class="number">10</span></span><br><span class="line"><span class="comment"># 去百位数</span></span><br><span class="line">t3 = y // <span class="number">100</span></span><br><span class="line">print(t1 * <span class="number">100</span> + t2 * <span class="number">10</span> + t3)</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>短路运算:一旦前面的表达式可以完成整个表达式关系的计算,那么后续的计算就不会继续判断</p><p>在and中,只要有一个False则整个表达式的结果就是False</p><p>在or中,只要有一个True则整个表达式的结果就是True</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与”  如果 x 为 False，x and y 返 回 False，否则它返回 y 的计算值。</td><td>x = False y = True b = x and y print(b)</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或”  如果 x 是 True，它返回  True，否则它返回 y 的计算值。</td><td>x = True y = False b = x or y print(b)</td></tr><tr><td>not</td><td>not x</td><td>布尔”非”  如果 x 为 True，返回 False。如果 x 为 False，它返回 True。</td><td>x = True b = not x print(b)</td></tr></tbody></table><h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c = a 等效于 c = c a</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr></tbody></table><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/10-23_21:17.png" alt="10-23_21:17"></p><h4 id="匹配固定字符的元字符"><a href="#匹配固定字符的元字符" class="headerlink" title="匹配固定字符的元字符"></a>匹配固定字符的元字符</h4><table><thead><tr><th>标识符</th><th>含义</th></tr></thead><tbody><tr><td>\b</td><td>匹配单词的开和结束 Hello World</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\w</td><td>匹配字母,数字,下划线</td></tr><tr><td>\s</td><td>匹配任意空白,包括空格,制表符</td></tr><tr><td>[a-z]</td><td>匹配字符a到z之间的26个小写字母中的任意一个字母</td></tr><tr><td>.</td><td>匹配换行符以外的任意一个字符</td></tr></tbody></table><h4 id="表示重复次数的元字符"><a href="#表示重复次数的元字符" class="headerlink" title="表示重复次数的元字符"></a>表示重复次数的元字符</h4><table><thead><tr><th>标识符</th><th>含义</th></tr></thead><tbody><tr><td>?</td><td>重复匹配0次到1次</td></tr><tr><td>*</td><td>重复匹配0次或更多次</td></tr><tr><td>+</td><td>重复匹配1次或更多次</td></tr><tr><td>{n , }</td><td>重复n次或更多次</td></tr><tr><td>{n , m}</td><td>重复n 到 m次</td></tr></tbody></table><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li><p>导包</p><p><code>import re</code></p></li><li><p>将一个正则表达式编译成一个pattern对象(正则表达式规则模式对象)</p><p><code>pattern = re.compile(&#39;正则表达式&#39;,&#39;匹配的模式&#39;,)</code></p><p>匹配模式: re.S 可以匹配任意字符</p></li><li><p>使用pattern对象,进行匹配文本</p><p>匹配的方法<code>pattern.match/search/findall/sub/split</code></p></li></ol><h4 id="匹配方法"><a href="#匹配方法" class="headerlink" title="匹配方法"></a>匹配方法</h4><ol><li><p>match方法: 默认从开头位置匹配,只匹配一次,返回match对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">match对象 = pattern.match(</span><br><span class="line"><span class="string">'待匹配的字符串'</span>,</span><br><span class="line"><span class="string">'匹配的开始位置'</span>, 默认为<span class="number">0</span></span><br><span class="line"><span class="string">'匹配的结束位置'</span>, 默认就是字符串的结尾</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>search方法: 默认全文匹配,值匹配一次,全文都找到返回match对象,全文都没找到就返回None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search对象 = pattern.search(</span><br><span class="line"><span class="string">'待匹配的字符串'</span>,</span><br><span class="line">  <span class="string">'匹配的开始位置'</span>,  默认就是<span class="number">0</span></span><br><span class="line">  <span class="string">'匹配的结束为止'</span>,  默认就是字符串的结尾</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>findall方法: 全文匹配,匹配多次,将匹配到的数据存放到一个list中返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = pattern.findall(</span><br><span class="line"><span class="string">'待匹配的字符串'</span>,</span><br><span class="line"><span class="string">'匹配的开始为止'</span>,  默认为<span class="number">0</span></span><br><span class="line"><span class="string">'匹配的结束位置'</span>,  默认是字符串的结尾</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>split方法: 切分字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = pattern.split(</span><br><span class="line"><span class="string">'切分的字符串'</span>,</span><br><span class="line"><span class="string">'切分次数'</span>, 默认是全部切分</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>sub方法: 替换字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = pattern.sub(</span><br><span class="line"><span class="string">'替换的内容'</span>,  想要用啥替换</span><br><span class="line"><span class="string">'替换的目标'</span>,  替换哪个字符串</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h4 id="贪婪和非贪婪"><a href="#贪婪和非贪婪" class="headerlink" title="贪婪和非贪婪"></a>贪婪和非贪婪</h4><ol><li>贪婪和非贪婪表示的正则匹配次数</li><li>正则匹配模式是贪婪模式,非贪婪模式用?控制</li><li>贪婪模式下,匹配的次数取决于最大值,非贪婪模式下匹配次数取决于最小值</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(14)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-14/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-14/</url>
      
        <content type="html"><![CDATA[<p>课后习题</p><a id="more"></a><h2 id="最大公约数和最小公倍数"><a href="#最大公约数和最小公倍数" class="headerlink" title="最大公约数和最小公倍数"></a>最大公约数和最小公倍数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*输入两个数，求最大公约数和最小公约数*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, x , y, t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    x = a;</span><br><span class="line">    y = b;</span><br><span class="line">    <span class="comment">// 交换a与b的值</span></span><br><span class="line">    <span class="keyword">if</span> ( a &lt; b)&#123;</span><br><span class="line">        t = b;</span><br><span class="line">        b = a;</span><br><span class="line">        a = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当b不等于0时执行循环体语句</span></span><br><span class="line">    <span class="keyword">while</span>( b != <span class="number">0</span>)&#123;</span><br><span class="line">        t = a % b;</span><br><span class="line">        a = b; <span class="comment">// a 最后的结果为最大公约数</span></span><br><span class="line">        b = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = x * y / a; <span class="comment">// 最初值相乘除以最大公约数得到最小公倍数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最大公约数是：%d\n"</span></span><br><span class="line">           <span class="string">"最小公约数是：%d"</span>, a, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印如下图案"><a href="#打印如下图案" class="headerlink" title="打印如下图案"></a>打印如下图案</h2><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/07-19_16:57.png" alt="07-19_16:57"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">  ***</span></span><br><span class="line"><span class="comment"> *****</span></span><br><span class="line"><span class="comment">*******</span></span><br><span class="line"><span class="comment"> *****</span></span><br><span class="line"><span class="comment">  ***</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123; <span class="comment">// 循环次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">4</span> - i; ++k) &#123; <span class="comment">// 空格</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i * <span class="number">2</span> - <span class="number">1</span>; j++) &#123; <span class="comment">// 星号</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &gt;= <span class="number">1</span> ; i--) &#123; <span class="comment">// 循环次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;=  <span class="number">4</span> - i ; ++k) &#123; <span class="comment">// 空格</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i * <span class="number">2</span> <span class="number">-1</span>; ++j) &#123; <span class="comment">// 星号</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数实现素数"><a href="#函数实现素数" class="headerlink" title="函数实现素数"></a>函数实现素数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输入一个值，并传递给函数isSushu</span></span><br><span class="line"><span class="comment"> * 在函数isSushu中判断该值是否为素数*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isSushu</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="comment">// 传递参数</span></span><br><span class="line">    isSushu(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isSushu</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>,isTrue = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 素数算法</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            isTrue = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    <span class="keyword">if</span> ( isTrue )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d是素数\n"</span>, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d不是素数"</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回空值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="100以内的所有素数"><a href="#100以内的所有素数" class="headerlink" title="100以内的所有素数"></a>100以内的所有素数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求100以内的素数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">3</span>; x &lt;= <span class="number">100</span>; x++) &#123;</span><br><span class="line">        <span class="keyword">int</span> isPrime = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; x; i++) &#123;</span><br><span class="line">          <span class="comment">// 当x % i 的值为0 时</span></span><br><span class="line">            <span class="keyword">if</span> (!(x % i)) &#123;</span><br><span class="line">                isPrime = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 如果isPrime不为0,代表这个值是素数,输出它</span></span><br><span class="line">        <span class="keyword">if</span> (isPrime) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡算法-输入十个数-将其从大到小输出"><a href="#冒泡算法-输入十个数-将其从大到小输出" class="headerlink" title="冒泡算法 - 输入十个数,将其从大到小输出"></a>冒泡算法 - 输入十个数,将其从大到小输出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*编写一个程序输入10个数，将其中最大的数和第一个数对换</span></span><br><span class="line"><span class="comment"> * 最小数和最后一个数对换，输出对换后的10个数*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a[NUM], i, j, k;</span><br><span class="line">    <span class="comment">// 输入数据</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUM - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; NUM - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; NUM - <span class="number">1</span>; k++) &#123;</span><br><span class="line">            <span class="comment">// 如果后者大于前者</span></span><br><span class="line">            <span class="keyword">if</span> (a[k] &lt; a[k + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 将其往前移一位</span></span><br><span class="line">                <span class="keyword">int</span> tmp = a[k + <span class="number">1</span>];</span><br><span class="line">                a[k + <span class="number">1</span>] = a[k];</span><br><span class="line">                a[k] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历数组并输出</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUM - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入-不多于五位的正整数-输出其位数-每一个数字-逆向输出"><a href="#输入-不多于五位的正整数-输出其位数-每一个数字-逆向输出" class="headerlink" title="输入 不多于五位的正整数,输出其位数,每一个数字,逆向输出"></a>输入 不多于五位的正整数,输出其位数,每一个数字,逆向输出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"math.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, n, tmp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="comment">// 将x的值赋给临时变量tmp</span></span><br><span class="line">    tmp = x;</span><br><span class="line">    <span class="comment">// 输出输入数的位数</span></span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; tmp &gt; <span class="number">0</span>; n++) &#123;</span><br><span class="line">        tmp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"它是%d位数\n"</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挨个输出x的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"每一个数字是:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = (<span class="keyword">int</span>) (x / <span class="built_in">pow</span>(<span class="number">10</span>, i - <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, t % <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逆向输出x的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n逆向输出结果是:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = x % <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, t);</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入一串字符-统计英文-空格-数字-其他字符数量"><a href="#输入一串字符-统计英文-空格-数字-其他字符数量" class="headerlink" title="输入一串字符,统计英文,空格,数字,其他字符数量"></a>输入一串字符,统计英文,空格,数字,其他字符数量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*输入一行字符，分别统计出其中英文字母，空格，数字和其他字符的个数*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> letter = <span class="number">0</span>, space = <span class="number">0</span>, num = <span class="number">0</span>, other = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line">        <span class="comment">// 统计英文个数</span></span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="string">'A'</span> &amp;&amp; c &lt;= <span class="string">'Z'</span> || c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">            letter++;</span><br><span class="line">            <span class="comment">// 统计空格个数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">' '</span>) &#123;</span><br><span class="line">            space++;</span><br><span class="line">            <span class="comment">// 统计数字个数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            num++;</span><br><span class="line">            <span class="comment">// 统计其他字符个数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> other++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"英文有：%d个\n空格有：%d个\n"</span></span><br><span class="line">           <span class="string">"数字有%d个\n其他字符有%d个"</span>,</span><br><span class="line">           letter, space, num, other);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求x-xx-xxx-xxxx-…-S-n"><a href="#求x-xx-xxx-xxxx-…-S-n" class="headerlink" title="求x + xx + xxx + xxxx +… = S ^ n"></a>求x + xx + xxx + xxxx +… = S ^ n</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, temp = <span class="number">0</span>, sum = <span class="number">0</span>, t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">    t = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= t; j++) &#123;</span><br><span class="line">        temp += i;</span><br><span class="line">        sum += temp;</span><br><span class="line">        i *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求∑-n-1到20-n"><a href="#求∑-n-1到20-n" class="headerlink" title="求∑ (n = 1到20) n !"></a>求∑ (n = 1到20) n !</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1! + 2! + 3! + 20!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> fact = <span class="number">1</span>, sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 阶乘的值</span></span><br><span class="line">        fact *= i;</span><br><span class="line">        <span class="comment">// 各个阶乘值相加</span></span><br><span class="line">        sum += fact;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以指数形式输出，并精确到小数点后15位</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.15e"</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入三个字符串-求最大的一个"><a href="#输入三个字符串-求最大的一个" class="headerlink" title="输入三个字符串,求最大的一个"></a>输入三个字符串,求最大的一个</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 有三个字符串,要求找出其中最大者 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义一个二维字符串数组x,三列字符长度均20</span></span><br><span class="line">    <span class="keyword">char</span> x[<span class="number">3</span>][<span class="number">20</span>] = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 定义一个字符变量string，存放最大者</span></span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="comment">// 输入三次，分别存放在x[0],x[1],x[2]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        gets(x[i]);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 判断，对比x[0]和x[1]的值，如果x0大于x1则将x0的值赋给string变量</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(x[<span class="number">0</span>],x[<span class="number">1</span>]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="built_in">string</span>, x[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 否则将x1的值赋给string变量</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="built_in">strcpy</span>(<span class="built_in">string</span>, x[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// 判断，对比x[2]和string的值，如果x2大于string则将x2的值赋给string变量</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(x[<span class="number">2</span>],<span class="built_in">string</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="built_in">string</span>, x[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="built_in">string</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(13)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-13/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-13/</url>
      
        <content type="html"><![CDATA[<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><a id="more"></a><p>位运算符作用于位，并逐位执行操作</p><p><font color="red">建议动纸笔手算便于理解</font></p><h4 id="按位运算"><a href="#按位运算" class="headerlink" title="按位运算"></a>按位运算</h4><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与操作，按二进制位进行”与”运算</td></tr><tr><td>|</td><td>按位或运算符，按二进制位进行”或”运算</td></tr><tr><td>~</td><td>取反运算符，按二进制位进行”取反”运算</td></tr><tr><td>^</td><td>异或运算符，按二进制位进行”异或”运算</td></tr></tbody></table><h5 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h5><ul><li><p>对比a与b的二进制数,当重叠部分皆是1时则为1,当任其一位有差异或皆为0则为0,超出部分忽略按0处理</p></li><li><p>用于处理让某一位或某些位为0: <code>x &amp; 254</code>让最后一位为0</p></li><li><p>例如<code>53 &amp; 37</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">先将两个数的二进制换算出来,然后进行位与运算</span><br><span class="line">53的二进制数是: 1 1 0 1 0 1</span><br><span class="line">37的二进制数是: 1 0 0 1 0 1</span><br><span class="line">⇩_____⇩___⇩</span><br><span class="line">            1 0 0 1 0 1  &#x2F;&#x2F; 相与后的结果</span><br><span class="line">            ___________</span><br><span class="line">        &#x2F;&#x2F; 二进制转十进制,从右向左计算</span><br><span class="line">(1*2^0)+(0*2^1)+(1*2^2)+(0*2^3)+(0*2^4)+(1*2^5)</span><br><span class="line">_______________________________________________</span><br><span class="line">1 + 0 + 4 + 0 + 0 + 32 &#x3D; 37</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/upic/2020/mobile/1592299342929.jpg" alt=""></p></li></ul><h5 id=""><a href="#" class="headerlink" title="|"></a>|</h5><ul><li><p>对比a与b的二进制数,当重叠部分皆是1或任其一位为1则为1,都是0则为0</p></li><li><p>超出部分是1则按1算</p></li><li><p>例如<code>23 | 49</code></p></li><li><p>常用于让一位或几个位为1: <code>x | 1</code> 如论x是0还是1,或1后都是1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">先将两个数的二进制换算出来,然后进行位或运算</span><br><span class="line">53的二进制数是:   1 0 1 1 1</span><br><span class="line">37的二进制数是: 1 1 0 0 0 1</span><br><span class="line">⇩_⇩___⇩_⇩_⇩</span><br><span class="line">            1 1 0 1 1 1  &#x2F;&#x2F; 相或后的结果</span><br><span class="line">            ___________</span><br><span class="line">        &#x2F;&#x2F; 二进制转十进制,从右向左计算</span><br><span class="line">(1*2^0)+(1*2^1)+(1*2^2)+(0*2^3)+(1*2^4)+(1*2^5)</span><br><span class="line">_______________________________________________</span><br><span class="line">1 + 2 + 4 + 0 + 16 + 32 &#x3D; 55</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/upic/2020/mobile/IMG_20200616_173231.jpg" alt=""></p></li></ul><h5 id="-1"><a href="#-1" class="headerlink" title="~"></a>~</h5><ul><li><p>对于a的二进制数来做取反的输出,即1变成0,0变成1</p></li><li><p>例如<code>~88</code></p></li><li><p><code>~0</code> –&gt; <code>-1</code></p></li><li><p><code>~70</code> –&gt; <code>-71</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">计算88的二进制数,让其0变1,1变0</span><br><span class="line">88的二进制数是   0 1 0 1 1 0 0 0 </span><br><span class="line">       做取反   1 0 1 0 0 1 1 1</span><br><span class="line">       </span><br><span class="line">其中有一位是二进制数的补码形式</span><br><span class="line">其最终结果就是-89</span><br></pre></td></tr></table></figure></li></ul><h5 id="-2"><a href="#-2" class="headerlink" title="^"></a>^</h5><ul><li><p>对于a与b的二进制数做按位异或的运算,如果a和b两个位相等,结果为0,否则不相等结果为1</p></li><li><p>如果a与b 的值相等,那么结果为0</p></li><li><p>对同一个变量用同一个值异或两次,将回到原值</p></li><li><p><code>a ^ b ^ b  --&gt; a</code></p></li><li><p>例如<code>32^11</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">计算32和11的二进制数</span><br><span class="line">32的二进制数: 0 0 1 0 0 0 0 0 </span><br><span class="line">11的二进制数: 0 0 0 0 1 0 1 1</span><br><span class="line">   做异或:    ⇩   ⇩   ⇩ ⇩</span><br><span class="line">   0 0 1 0 1 0 1 1</span><br><span class="line">(1*2^0)+(1*2^1)+(0*2^2)+(1*2^3)+(0*2^4)+(1*2^5)+(0*2^6)+(0*2^7) </span><br><span class="line">_________________________________________________________________</span><br><span class="line">1 + 2 + 0 + 8 + 0 + 32 + 0 + 0 &#x3D; 43</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/upic/2020/mobile/1592319151285.jpg" alt=""></p></li></ul><h4 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h4><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&lt;&lt;</td><td>二进制左移运算符,将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃,右边补0）</td></tr><tr><td>&gt;&gt;</td><td>二进制右移运算符,将一个数的各二进制位全部右移若干位,正数左补0,负数左补1,右边丢弃</td></tr></tbody></table><p><em><strong>没有移位负数这一说!</strong></em></p><h5 id="lt-lt"><a href="#lt-lt" class="headerlink" title="&lt;&lt;"></a>&lt;&lt;</h5><ul><li><p><code>a &lt;&lt; b</code>将a的二进制数向左移动b个位置,右边多出部分补0</p></li><li><p>所有小于int的类型,移位以int的方式来做,其结果是int类型</p></li><li><p><code>a &lt;&lt; 1  == a *= 2</code>, <code>a &lt;&lt; n  ==  a *= 2^n</code></p><ul><li>例如<code>a = 5;  a &lt;&lt; 2 == a = 5*4</code></li></ul></li><li><p>按照二进制计算,例如<code>27 &lt;&lt; 4</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">计算27的二进制数</span><br><span class="line">27的二进制数:   0 0 0 1 1 0 1 1</span><br><span class="line">        |</span><br><span class="line">左移四位变成  0 0 0 1   1 0 1 1 0 0 0 0</span><br><span class="line">计算出左移后的值  </span><br><span class="line">(0*2^0)+(0*2^1)+(0*2^3)+(1*2^4)+(1*2^5)+(0*2^6)+(1*2^7)+(1*2^8)</span><br><span class="line">_________________________________________________________________</span><br><span class="line">256 + 128 + 32 + 16 &#x3D; 432</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/upic/2020/mobile/MVIMG_20200617_162234.jpg" alt=""></p></li></ul><h5 id="gt-gt"><a href="#gt-gt" class="headerlink" title="&gt;&gt;"></a>&gt;&gt;</h5><ul><li><p><code>a  &gt;&gt; b</code>将a的二进制数向右移动b个位置,右边超出部分丢弃</p></li><li><p>所有小于int的类型,移位以int的方式来做,其结果是int类型</p></li><li><p>对于Unsigned类型,左边填入0,对于signed类型,左边填入原来的最高位(保持符号不变)</p></li><li><p><code>a &gt;&gt; 1   ==  a /= 2</code>, <code>a &gt;&gt; n  ==  x /= 2^n</code></p><ul><li>例如<code>a = 20; a &gt;&gt; 3 == a = 20/8</code></li></ul></li><li><p>按照二进制计算,例如<code>37 &gt;&gt; 2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">计算37的二进制数</span><br><span class="line">37的二进制数:       0 0 1 0 0 1  0 1</span><br><span class="line">               |</span><br><span class="line">右移两位变成  0 0 0 0 1 0 0 1</span><br><span class="line">计算出右移后的值  </span><br><span class="line">(1*2^0)+(0*2^1)+(0*2^3)+(1*2^4)</span><br><span class="line">_______________________________</span><br><span class="line">1 + 0 + 0 + 8 &#x3D; 9</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/upic/2020/mobile/MVIMG_20200617_171507.jpg" alt=""></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(12)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-12/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-12/</url>
      
        <content type="html"><![CDATA[<h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><a id="more"></a><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p><code>scanf %[flag] type</code></p><table><thead><tr><th>flag</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>跳过</td></tr><tr><td>数字</td><td>最大字符数</td></tr><tr><td>hh</td><td>char</td></tr><tr><td>h</td><td>short</td></tr><tr><td>l</td><td>long,double</td></tr><tr><td>ll</td><td>long long</td></tr><tr><td>L</td><td>long double</td></tr></tbody></table><p><table><thead><tr><th>type</th><th>用于</th></tr></thead><tbody><tr><td>d</td><td>int</td></tr><tr><td>i</td><td>整数,可能是16进制或8进制</td></tr><tr><td>u</td><td>Unsigned int</td></tr><tr><td>o</td><td>8进制</td></tr><tr><td>x</td><td>16进制</td></tr><tr><td>a,e,f,g</td><td>float</td></tr><tr><td>c</td><td>char</td></tr><tr><td>s</td><td>字符串(单词)</td></tr><tr><td>p</td><td>指针</td></tr></tbody></table><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p><code>printf %[flags] [width] [.prec] [hlL] type</code></p><table><thead><tr><th>flag</th><th>含义</th></tr></thead><tbody><tr><td>-</td><td>左对齐</td></tr><tr><td>+</td><td>在前面放+或-单目运算符</td></tr><tr><td>空格</td><td>正数留空</td></tr><tr><td>0</td><td>填充0</td></tr></tbody></table><p><table><thead><tr><th>width</th><th>含义</th></tr></thead><tbody><tr><td>number</td><td>最小字符数</td></tr><tr><td>*</td><td>下一个参数是字符数</td></tr><tr><td>.number</td><td>精确小数点位数</td></tr><tr><td>.*</td><td>下一个参数是小数点后的位数</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%*d"</span>, <span class="number">5</span> ,<span class="number">11</span>);  <span class="comment">// --&gt; printf("%5d", 11) 右对齐5位 5可以是变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><table><thead><tr><th>修饰类型</th><th>含义</th></tr></thead><tbody><tr><td>hh</td><td>单个字符</td></tr><tr><td>h</td><td>short</td></tr><tr><td>l</td><td>long</td></tr><tr><td>ll</td><td>long long</td></tr><tr><td>L</td><td>long double</td></tr></tbody></table><p><table><thead><tr><th>type</th><th>用于</th><th>–</th><th>type</th><th>用于</th></tr></thead><tbody><tr><td>i或者d</td><td>int</td><td></td><td>s</td><td>float,6</td></tr><tr><td>c</td><td>char</td><td></td><td>g</td><td>char</td></tr><tr><td>G</td><td>float</td><td></td><td>f或F</td><td>float,6</td></tr><tr><td>o</td><td>8进制</td><td></td><td>x</td><td>16进制</td></tr><tr><td>X</td><td>大写16进制</td><td></td><td>p</td><td>指针</td></tr><tr><td>a或A</td><td>16进制浮点</td><td></td><td>e或E</td><td>指数</td></tr><tr><td>u</td><td>Unsigned int</td><td></td><td>n</td><td>读入/写入的个数</td></tr><tr><td>#o</td><td>带前导8进制</td><td></td><td>#x</td><td>带前导16进制</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> *<span class="built_in">string</span> = <span class="string">"abcdefg"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s%n\n"</span>, <span class="built_in">string</span>, &amp;num); </span><br><span class="line">    <span class="comment">// 将a-g的个数通过%n传递给指针变量num</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h3><ul><li><p>用&gt;和&lt;做重定向</p></li><li><p>理解成mysql和Linux就行</p></li></ul><h4 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h4><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>r</td><td>打开只读</td></tr><tr><td>r+</td><td>打开读写,从文件开头开始</td></tr><tr><td>w</td><td>打开只写,如果不存在则新建,如果存在则清空</td></tr><tr><td>w+</td><td>打开读写,如果不存在则新建,如果存在则清空</td></tr><tr><td>a</td><td>打开追加,如果不存在则新建,如果存在则从文件末尾开始</td></tr><tr><td>..x</td><td>只新建,如果文件已存在则无法打开</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(11)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-11/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-11/</url>
      
        <content type="html"><![CDATA[<p>无题</p><a id="more"></a><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ul><li>定义在函数外面的变量就是全局变量</li><li>全局变量具有全局的生存期和作用域</li><li>它们与任何函数都没有关系,但是在任何函数的内部都可以使用它们</li><li>全局变量默认初始化值是0,指针变量会得到NULL值</li><li>只能用已知的值去初始化全局变量,因为它们的初始化在Main函数之前</li><li>如果函数内部存在与全局变量同名的变量,那么全局变量会被覆盖</li></ul><h3 id="静态本地变量"><a href="#静态本地变量" class="headerlink" title="静态本地变量"></a>静态本地变量</h3><ul><li>在本地变量定义时加上static修饰符就能成为静态本地变量</li><li>当函数离开的时候,静态本地变量会继续存在并保持其值</li><li>静态本地变量的初始化只会在第一次进入这个函数的时候做,以后进入函数时会保持上次离开时候的值</li><li>static是特殊的全局变量,与全局变量在内存的同一块地址,具有全局生存期,但只有局部作用域</li></ul><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><ul><li><p>以#开头的是编译预处理指令,不是C语言自带的东西</p></li><li><p>使用<code>#define</code>定义宏,<code>#define &lt;名称&gt; &lt;值&gt;</code></p></li><li><p>在编译前通过完整的文本替换方式将名称替换对应的值</p></li><li><p>宏可以嵌套使用,超过一行的值需要在行末加上\</p></li><li><p>在值中写注释不会被当作值的一部分</p></li></ul><p>还有一些预定义的宏</p><table><thead><tr><th>宏</th><th>描述</th></tr></thead><tbody><tr><td>_<em>LINE_</em></td><td>这会包含当前行号，一个十进制常量。</td></tr><tr><td>_<em>FILE_</em></td><td>这会包含当前文件名，一个字符串常量。</td></tr><tr><td>_TIME_</td><td>当前时间，一个以 “HH:MM:SS” 格式表示的字符常量。</td></tr><tr><td>_DATE_</td><td>当前日期，一个以 “MMM DD YYYY” 格式表示的字符常量。</td></tr><tr><td>_STDC_</td><td>当编译器以 ANSI 标准编译时，则定义为 1。</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"File :%s\n"</span>, __FILE__);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Date :%s\n"</span>, __DATE__);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Time :%s\n"</span>, __TIME__);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Line :%d\n"</span>, __LINE__);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ANSI :%d\n"</span>, __STDC__);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * File :/Users/zhboat/CLionProjects/hon/main.c</span></span><br><span class="line"><span class="comment"> * Date :Jun 14 2020</span></span><br><span class="line"><span class="comment"> * Time :15:37:03</span></span><br><span class="line"><span class="comment"> * Line :8</span></span><br><span class="line"><span class="comment"> * ANSI :1*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带参数的宏"><a href="#带参数的宏" class="headerlink" title="带参数的宏"></a>带参数的宏</h4><ul><li><p>可以像函数一样使用,将未来的参数传递到预处理指令中</p></li><li><p>格式<code>#define &lt;名称(参数)&gt; &lt;值&gt;</code></p></li><li><p>在其他函数中调用#define的名称加()时传递的值会回到#define中</p></li><li><p>使用参数的时候,整个值需要加上括号,每个使用参数的地方也需要加上括号</p></li><li><p>可以嵌套组合使用,也可以带上多个参数</p></li></ul><p><code>#define MIN(a,b) ((a)&gt;(b)?(b):(a))</code>判断两个数中最小的值,如果a大于b,则最小数就是b,否则就是a</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cube(i) ((i) * (i + 1) * ( i + 2))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// i = 5, i + 1 = 6, i + 2 = 7</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);  <span class="comment">// i = 5</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, cube(i)); <span class="comment">// 5 * 6 * 7 = 210</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="amp"><a href="#amp" class="headerlink" title="#&amp;##"></a>#&amp;##</h4><h5 id="字符串常量化运算符（-）"><a href="#字符串常量化运算符（-）" class="headerlink" title="字符串常量化运算符（#）"></a>字符串常量化运算符（#）</h5><p>在宏定义中，当需要把一个宏的参数转换为字符串常量时，则使用字符串常量化运算符（#）。在宏中使用的该运算符有一个特定的参数或参数列表</p><h5 id="标记粘贴运算符（-）"><a href="#标记粘贴运算符（-）" class="headerlink" title="标记粘贴运算符（##）"></a>标记粘贴运算符（##）</h5><p>宏定义内的标记粘贴运算符（##）会合并两个参数。它允许在宏定义中两个独立的标记被合并为一个标记</p><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><ul><li><p>头文件是扩展名为 .h 的文件，包含了 C 函数声明和宏定义，被多个源文件中引用共享。有两种类型的头文件：程序员编写的头文件和编译器自带的头文件。</p></li><li><p>把函数原型放到一个头文件(以.h结尾)中,在需要调用这个函数的源代码文件(.c)中#include这个头文件,就能让编译器在编译的时候知道函数的原型</p></li></ul><h4 id="include"><a href="#include" class="headerlink" title="#include"></a>#include</h4><ul><li><p>与宏一样,#include也是一个编译预处理指令,在编译之前就处理好了</p></li><li><p>它的作用是把头文件中的全部文本原封不动得插入到#include所在的位置</p></li><li><p><code>#include &quot;&quot;</code>要求编译器首先在当前目录寻找头文件,如果没有就去其他地方寻找,<code>#include &lt;&gt;</code>用于引用系统头文件,在系统目录的标准列表中搜索</p></li><li><p>在使用和定义函数的地方都应该有<code>#include 头文件</code>,任何源文件除了main函数都应该有对应的同名头文件,把所有对外公开的函数的原型和全局变量的声明都放进去</p></li></ul><h4 id="不对外公开的函数"><a href="#不对外公开的函数" class="headerlink" title="不对外公开的函数"></a>不对外公开的函数</h4><ul><li>在函数前面加上static就能让他成为只能在所在的源代码中才能被使用的函数</li></ul><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><ul><li><p>对于变量的声明,格式:<code>extern 变量类型 变量名</code> </p></li><li><p><code>函数原型</code> <code>变量声明</code> <code>结构声明</code> <code>宏声明</code> <code>枚举声明</code> <code>类型声明</code> …等,这些声明都是不产生代码,只有在定义的时候才产生代码</p></li></ul><h4 id="重复声明"><a href="#重复声明" class="headerlink" title="重复声明"></a>重复声明</h4><ul><li><p>如果头文件中有结构的声明,那么很可能会在同一个源代码中被#include很多次,为了避免这种情况的发生,需要用到标准头文件结构</p></li><li><p>标准的做法是把文件的整个内容放在条件编译语句中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> 头文件</span></span><br><span class="line">声明</span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> POINT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POINT_H</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(10)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-10/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-10/</url>
      
        <content type="html"><![CDATA[<h3 id="枚举-Enumer"><a href="#枚举-Enumer" class="headerlink" title="枚举 (Enumer)"></a>枚举 (Enumer)</h3><a id="more"></a><p>枚举是一种用户定义基本数据类型,使用关键字enum声明,主要用于排比一系列有意义的名字</p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p><code>enum 枚举名 {枚举元素1,枚举元素2,...}</code></p><p>枚举元素只能是int类型,可以作为常量符号使用</p><p>枚举可以让独立定义的连续常量更简洁化</p><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> zero = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> one = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> two = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> three = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>可以使用枚举写成<code>enum number{zero,one,two,three}</code></p><p>第一个枚举元素默认从0开始,你可以指定第一个从任意数字开始,后面依次排列</p><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>枚举的元素可以作为值去使用,而枚举类型可以带上enum作为数据类型,犹如int、double这种数据类型一样,还可以以整数的方式做内部计算和外部的输入输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> number &#123; one = <span class="number">1</span>, two, three &#125;; <span class="comment">// 声明number类型的数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">enum</span> number x)</span></span>; <span class="comment">// 声明f函数需要一个number类型的参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> number t = <span class="number">0</span>; <span class="comment">// 初始化number类型的临时变量t</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;t);</span><br><span class="line">    f(t); <span class="comment">// 传递t的值到f函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">enum</span> number x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, x);  <span class="comment">// 输出number类型的x变量</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体-Struct"><a href="#结构体-Struct" class="headerlink" title="结构体 (Struct)"></a>结构体 (Struct)</h3><p>可以理解成可以存放不同数据类型的数组,一个结构中包含了多个成员的数据类型</p><p><font color=#90e>⇩长代码警告!</font></p><h4 id="结构类型"><a href="#结构类型" class="headerlink" title="结构类型"></a>结构类型</h4><p>结构类型需要使用struct语句,定义变量时需要带上struct以及结构类型名称</p><h5 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> 结构体类型名称 &#123;</span> </span><br><span class="line">    成员变量;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> 结构体类型名称 变量名;</span></span><br></pre></td></tr></table></figure><p>也可以写成下面这样,它们的意思是一样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明结构并定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> 结构体类型名称 &#123;</span> </span><br><span class="line">    成员变量;</span><br><span class="line">&#125;变量名;</span><br></pre></td></tr></table></figure><p>每个变量名都包含结构变量的所有内容,当你要对变量赋值时,需要对应结构体中的成员变量类型</p><h5 id="结构运算"><a href="#结构运算" class="headerlink" title="结构运算"></a>结构运算</h5><p>与数组一样,当需要访问结构成员时,使用<code>变量名 .成员变量</code>的方式</p><p>要访问整个结构的时候直接用结构变量的名称就行</p><p>对于整个结构,可以做赋值,取地址的操作,还可以传递给函数参数</p><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>在定义变量的时候就初始化结构内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明结构并定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">number</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> one;</span><br><span class="line">    <span class="keyword">int</span> two;</span><br><span class="line">    <span class="keyword">int</span> three;</span><br><span class="line">&#125; demo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化变量struct number类型的变量demo的值为one = 10,two = 20,three = 30</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">number</span> <span class="title">demo</span> = &#123;</span><span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"one = %i,two = %i, three = %i"</span>, demo.one, demo.two, demo.three);</span><br><span class="line">    <span class="comment">// one = 10,two = 20, three = 30</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以用另一种方式去初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明结构并定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">number</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> one;</span><br><span class="line">    <span class="keyword">int</span> two;</span><br><span class="line">    <span class="keyword">int</span> three;</span><br><span class="line">&#125;demo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化变量struct number类型的变量demo的值为one = 10,two = 20,three = 30</span></span><br><span class="line">    demo = (struct number)&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"one = %i,two = %i, three = %i"</span>, demo.one, demo.two, demo.three);</span><br><span class="line">    <span class="comment">// one = 10,two = 20, three = 30</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至你还可以像数组一样对单个成员变量初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 声明结构并定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">number</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> one;</span><br><span class="line">    <span class="keyword">int</span> two;</span><br><span class="line">    <span class="keyword">int</span> three;</span><br><span class="line">&#125;demo;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 初始化变量struct number类型的变量demo的值为one = 10,three = 30,而没有给值的two默认为0</span></span><br><span class="line">    demo = (struct number)&#123;.one = <span class="number">10</span>, .three = <span class="number">30</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"one = %i,two = %i, three = %i"</span></span><br><span class="line">            , demo.one, demo.two, demo.three);</span><br><span class="line">   <span class="comment">// one = 10,two = 0, three = 30</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结构指针"><a href="#结构指针" class="headerlink" title="结构指针"></a>结构指针</h5><p>与数组不同的是,结构变量的名称并不是结构变量的地址,所以在访问结构变量在内存中的的地址时,需要用到取地址符<code>&amp;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">number</span> *<span class="title">p</span> = &amp;<span class="title">demo</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"demo = %p"</span>, p); <span class="comment">// demo = 0x10c62b010</span></span><br></pre></td></tr></table></figure><p>需要用指针指向结构内容时,可以用到一个新的运算符<code>-&gt;</code></p><p>意为将指针指向结构的成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明结构并定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">number</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> two;</span><br><span class="line">&#125;demo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化变量struct number类型的变量demo的值为two = 20</span></span><br><span class="line">    demo = (struct number)&#123; <span class="number">20</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"two = %i\n"</span>, demo.two);     <span class="comment">// two = 20</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">number</span> *<span class="title">p</span> = &amp;<span class="title">demo</span>;</span> <span class="comment">// 让指针p指向结构变量demo的地址</span></span><br><span class="line">    <span class="comment">// 使用指针p去修改结构成员的值</span></span><br><span class="line">    p -&gt; two = <span class="number">200</span>; <span class="comment">// == demo.two = 200; == (*p).two = 200 ;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"two = %i"</span>, p-&gt;two);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学生表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> studentID;</span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">char</span> *sex;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;first;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//struct student first;</span></span><br><span class="line">    first = (struct student)</span><br><span class="line">            &#123;<span class="number">1003</span>,<span class="string">"张三"</span>,<span class="string">"男"</span>,<span class="number">19</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"名字\t性别\t年龄\t学号\t\n%s\t%s\t%i\t%i"</span></span><br><span class="line">    ,first.name, first.sex, first.age, first.studentID);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构函数"><a href="#结构函数" class="headerlink" title="结构函数"></a>结构函数</h4><p>整个结构可以作为参数的值传入函数</p><p>当传递的是一个结构时,在函数中是新建了一个结构变量,并复制了调用者的结构的值</p><p>这个函数的返回类型可以是一个结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 判断是否为闰年，如果是闰年让今年的2月变成29天</span></span><br><span class="line"><span class="comment"> * 明天的日期根据用户输入的值去改变*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numberofDays</span><span class="params">(struct date d)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(struct date d)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">today</span>, <span class="title">tomorrow</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter today's date (mm-dd-yy):"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%i-%i-%i"</span>, &amp;today.month, &amp;today.day, &amp;today.year);</span><br><span class="line">    <span class="comment">// 当今天的日期不等于num函数返回的结果时</span></span><br><span class="line">    <span class="keyword">if</span> (today.day != numberofDays(today)) &#123;  <span class="comment">// num函数调用主函数中的结构变量today</span></span><br><span class="line">        <span class="comment">// 明天的日期就+1，月和年保持不变</span></span><br><span class="line">        tomorrow.day = today.day + <span class="number">1</span>;</span><br><span class="line">        tomorrow.month = today.month;</span><br><span class="line">        tomorrow.year = today.year;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (today.month == <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="comment">// 当今年的月份是十二月并且不满足上个if时</span></span><br><span class="line">        <span class="comment">// 明天的日期变成1，月份变成1，年份加一</span></span><br><span class="line">        tomorrow.day = <span class="number">1</span>;</span><br><span class="line">        tomorrow.month = <span class="number">1</span>;</span><br><span class="line">        tomorrow.year = today.year + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 综上条件都不满足，即在月末的最后一天</span></span><br><span class="line">        <span class="comment">// 明天的日期变成1，月份加一，年份不变</span></span><br><span class="line">        tomorrow.day = <span class="number">1</span>;</span><br><span class="line">        tomorrow.month = today.month + <span class="number">1</span>;</span><br><span class="line">        tomorrow.year = today.year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Tomorrow'date is %i-%i-%i"</span>,</span><br><span class="line">           tomorrow.month, tomorrow.day, tomorrow.year);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * NumberOfDays函数的目的是算出月末的最后一天*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numberofDays</span><span class="params">(struct date d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> days;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dayspermonth[<span class="number">12</span>] = &#123;</span><br><span class="line">            <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (d.month == <span class="number">2</span> &amp;&amp; isLeap(d)) &#123; <span class="comment">// 如果这个月是2月份，并且isLeap函数返回的是true</span></span><br><span class="line">        days = <span class="number">29</span>; <span class="comment">// 就让days变成29</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        days = dayspermonth[d.month - <span class="number">1</span>]; <span class="comment">// 如果不是2月份就让days变成数组中与月份对应的日子</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isLeap函数的作用是判断是否是闰年</span></span><br><span class="line"><span class="comment"> * 返回值默认是false，如果是闰年就返回true*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(struct date d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> leap = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> ((d.year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; d.year % <span class="number">100</span> != <span class="number">0</span>) || d.year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        leap = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> leap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构数组"><a href="#结构数组" class="headerlink" title="结构数组"></a>结构数组</h4><p>声明结构数组:<code>struct 结构体类型名称 成员变量[数组元素个数]</code>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">time</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> hour;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>;</span><br><span class="line">    <span class="keyword">int</span> seconds;</span><br><span class="line">&#125;NowTime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">time</span> <span class="title">NowTime</span>[5] = &#123;</span></span><br><span class="line">            <span class="comment">// NowTime[0] = ((NowTime.hour = 11),(NowTime.min = 59),(NowTime.seconds = 59))</span></span><br><span class="line">            &#123;<span class="number">11</span>,<span class="number">59</span>,<span class="number">59</span>&#125;,</span><br><span class="line">            <span class="comment">// NowTime[1] = ((NowTime.hour = 12),(NowTime.min = 0),(NowTime.seconds = 0))</span></span><br><span class="line">            &#123;<span class="number">12</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">      <span class="comment">// ...以此类推</span></span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">59</span>,<span class="number">29</span>&#125;,</span><br><span class="line">            &#123;<span class="number">23</span>,<span class="number">59</span>,<span class="number">59</span>&#125;,</span><br><span class="line">            &#123;<span class="number">19</span>,<span class="number">50</span>,<span class="number">29</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义一个结构数组，分别存放小时分钟秒</span></span><br><span class="line"><span class="comment"> * 遍历数组，输出每一个数组元素</span></span><br><span class="line"><span class="comment"> * 定义第二个函数，作用是算出当前时间的下一秒的时间*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">time</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> hour;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>;</span><br><span class="line">    <span class="keyword">int</span> seconds;</span><br><span class="line">&#125; NowTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function">struct time <span class="title">LaterTime</span><span class="params">(struct time now)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 常量CURT的值是5</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> CURT = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 初始化结构数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">time</span> <span class="title">NowTime</span>[<span class="title">CURT</span>] = &#123;</span></span><br><span class="line">            <span class="comment">// NowTime[0] = ((NowTime.hour = 11),(NowTime.min = 59),(NowTime.seconds = 59))</span></span><br><span class="line">            &#123;<span class="number">11</span>, <span class="number">59</span>, <span class="number">59</span>&#125;,</span><br><span class="line">            &#123;<span class="number">12</span>, <span class="number">0</span>,  <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,  <span class="number">59</span>, <span class="number">29</span>&#125;,</span><br><span class="line">            &#123;<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>&#125;,</span><br><span class="line">            &#123;<span class="number">19</span>, <span class="number">50</span>, <span class="number">29</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">time</span> *<span class="title">p</span> = <span class="title">NowTime</span>;</span>  <span class="comment">// 定义struct time类型的指针变量p</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CURT; i++) &#123;</span><br><span class="line">        *p = NowTime[i]; <span class="comment">// 让指针变量p指向结构数组NowTime，每轮循环让NowTime[0+i]</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Nowtime is %.2i:%.2i:%.2i"</span>,</span><br><span class="line">               p-&gt;hour, p-&gt;<span class="built_in">min</span>, p-&gt;seconds); <span class="comment">// 指针变量p指向每个结构成员</span></span><br><span class="line">        *p = LaterTime(*p); <span class="comment">// 让指针变量p指向函数LaterTime，参数是NowTime[0+i]</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"...One seconds later its %.2i:%.2i:%.2i\n"</span>,</span><br><span class="line">               p-&gt;hour, p-&gt;<span class="built_in">min</span>, p-&gt;seconds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct time <span class="title">LaterTime</span><span class="params">(struct time now)</span> </span>&#123;</span><br><span class="line">    ++now.seconds;</span><br><span class="line">    <span class="keyword">if</span> (now.seconds == <span class="number">60</span>) &#123;</span><br><span class="line">        now.seconds = <span class="number">0</span>;</span><br><span class="line">        ++now.<span class="built_in">min</span>;</span><br><span class="line">        <span class="keyword">if</span> (now.<span class="built_in">min</span> == <span class="number">60</span>) &#123;</span><br><span class="line">            now.<span class="built_in">min</span> = <span class="number">0</span>;</span><br><span class="line">            ++now.hour;</span><br><span class="line">            <span class="keyword">if</span> (now.hour == <span class="number">24</span>) &#123;</span><br><span class="line">                now.hour = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套结构-禁止套娃"><a href="#嵌套结构-禁止套娃" class="headerlink" title="嵌套结构(禁止套娃!)"></a>嵌套结构(禁止套娃!)</h4><p>既然结构内可以是不同类型的数据,那么也可以是结构类型的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">aAndb</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">a</span> <span class="title">dataa</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">b</span> <span class="title">datab</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><font color=red>空间想象力太差了,告辞</font></p><p>复用的时候看作文件夹与快捷键就行</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-10_22:25.png" alt="06-10_22:25"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rectangle</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p2</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printRect</span><span class="params">(struct rectangle r)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&lt;%d,%d&gt; to &lt;%d,%d&gt;\n"</span>,</span><br><span class="line">           r.p1.x, r.p1.y, r.p2.x, r.p2.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rectangle</span> <span class="title">rects</span>[] = &#123;</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * rects[0] r.p1.x = 1,r.p1.y = 2</span></span><br><span class="line"><span class="comment">             * rects[0] r.p2.x = 3,r.p2.y = 4</span></span><br><span class="line"><span class="comment">             * rects[1] r.p1.x = 5,r.p1.y = 6</span></span><br><span class="line"><span class="comment">             * rects[1] r.p2.x = 7,r.p2.y = 8 */</span></span><br><span class="line"></span><br><span class="line">            &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;,</span><br><span class="line">            &#123;&#123;<span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>&#125;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        printRect(rects[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TypeDef"><a href="#TypeDef" class="headerlink" title="TypeDef"></a>TypeDef</h4><p>使用typedef可以自定义数据类型的名称,让其变成新的别名</p><p>复杂的名字化繁为简,重载已有的类型名称,新名称的含义更清晰更具有移植性</p><p>还能够替代数据类型出现在变量定于和参数声明</p><p>使用typedef最后的单词就是该类型的新名称</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> abc; <span class="comment">// 将int类型定义别名为abc</span></span><br><span class="line">abc a,b,c; <span class="comment">// 等价于int a,b,c</span></span><br><span class="line">abc number[<span class="number">5</span>]; <span class="comment">// 等价于int number[5]</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> studentID;</span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">char</span> *sex;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;aaa; </span><br><span class="line">aaa zhangsan = &#123;<span class="number">111</span>,<span class="string">"zhangsan"</span>,<span class="string">"nan"</span>,<span class="number">17</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="union-联合"><a href="#union-联合" class="headerlink" title="union(联合)"></a>union(联合)</h4><p>联合是一种特殊的数据类型,允许在相同的内存位置存储不同的数据类型</p><p>可以定义一个带有多成员的联合体,但是任何时候只能有一个成员带有值,联合体提供了一种使用相同的内存位置的有效方式</p><p>它的语法和结构一样,但是每个成员是共享一个空间</p><p>而且同一时间只有一个成员是有效的,union整体的空间大小就是最大的那个成员</p><p>所以你不能同时输出联合体中的所有成员的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> Data &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">union</span> Data data;</span><br><span class="line"></span><br><span class="line">    data.i = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"data.i : %d\n"</span>, data.i);</span><br><span class="line"></span><br><span class="line">    data.f = <span class="number">220.5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"data.f : %f\n"</span>, data.f);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(data.str, <span class="string">"Hello,World"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"data.str : %s\n"</span>, data.str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(9)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-9/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-9/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><a id="more"></a><ul><li><p>字符串是以字符数组的方式存在的</p></li><li><p>不能对其用运算符做运算</p></li><li><p>通过数组的方式可以遍历字符串</p></li><li><p>可以通过字符串常量去初始化字符数组</p></li></ul><h4 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h4><ul><li><p>以0结尾的一串字符</p></li><li><p>0标志字符串的结束,但它不是字符串的一部分,计算字符串长度的时候不包含这个0</p></li><li><p>字符串以数组的形式存在,以数组或指针的形式访问</p></li></ul><p>格式: <code>char hello[] = {&#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;!&#39;,&#39;\0&#39;};</code></p><p>每个字符使用单引号</p><p>结尾的<code>&#39;\0&#39;</code>可以写成0,但是不能写成’0’</p><p>对应的分别是</p><table><thead><tr><th>元素</th><th>值</th></tr></thead><tbody><tr><td>hello[0]</td><td>H</td></tr><tr><td>hello[1]</td><td>e</td></tr><tr><td>hello[2]</td><td>l</td></tr><tr><td>hello[3]</td><td>l</td></tr><tr><td>hello[4]</td><td>o</td></tr><tr><td>hello[5]</td><td>!</td></tr><tr><td>hello[6]</td><td>\0</td></tr></tbody></table><h4 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h4><p>指针变量 <code>char *string = &quot;Hello&quot;;</code></p><p>字符数组 <code>char word[] = &quot;Hello&quot;;</code></p><p>字符数组<code>char line[6]  = &quot;Hello&quot;</code>会占据6个字节的空间</p><p><p>字符数组在本地存放,本地变量的空间会自动回收</p><p>指针用来处理参数和不可修改的值,以及动态分配空间</p><p>当需要构建一个字符串时使用数组的方式,当处理字符串时用指针</p><h5 id="char"><a href="#char" class="headerlink" title="char *"></a>char *</h5><p>字符串可以表达成<code>char*</code>的形式,但<code>char*</code> 不一定是字符串,只有当它所指的字符数组的结尾处是0才能确定它指向的是字符串</p><h4 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h4><p>“Hello”就是字面量/常量,它会被编译器变成一个字符数组放在某处,这个数组的长度是字符+1,在结尾处还有个表示结束的0</p><p>两个相邻的字符串常量会被自动连接起来</p><p>当使用指针去定义字符串的时候,字符串常量是只读的,无法被修改 <code>const char *s = &quot;Hello,World&quot;;</code></p><p>当有第二个指针变量指向了已有的常量时,它们的地址是一模一样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *s = <span class="string">"Hello,Wolrd"</span>;</span><br><span class="line">    <span class="keyword">char</span> *s2 = <span class="string">"Hello,Wolrd"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"s = %p\n"</span>, s);  <span class="comment">// s = 0x10e9c2f92</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"s2 = %p"</span>, s2);  <span class="comment">// s2 = 0x10e9c2f92</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要修改字符串中的常量,需要使用字符数组去定义字符串<code>char word = &quot;Hello,Wolrd&quot;;</code></p><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>将指针变量a字符串赋值给另一个指针b的时候,是将a地址指向了b,将它们两个链接起来了,对b做的任何操作都会映射到a</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *a = <span class="string">"Hello,Wolrd"</span>;</span><br><span class="line">    <span class="keyword">char</span> *b = a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %s\n"</span>, a);    <span class="comment">// a = Hello,World</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %p\n"</span>, a);     <span class="comment">// a = 0x104f2af82</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b = %p\n"</span>, b);    <span class="comment">// b = 0x104f2af82</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b = %s"</span>, b);    <span class="comment">// b = Hello,World</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scanf作为字符串输入时,会读入一个单词(一串字符以空格和tab作为结束)</p><p>限制scanf的长度为12<code>scanf (&quot;%12s, a&quot;);</code>当超过12个字符后,越界的部分会被裁掉,当有连续的字符串时,会被挤到下个scanf</p><p>定义指针类型的字符串时,需要对变量进行初始化为0</p><h4 id="空字符串"><a href="#空字符串" class="headerlink" title="空字符串"></a>空字符串</h4><p><code>char a[10] = &quot;&quot;</code>意味着这是一个空的字符串,a[0] == ‘\0’</p><p><code>char a[] = &quot;&quot;</code>意味着这个字符串的长度只有1,而a[0]就是’\0’,所以你放不下任何东西</p><h4 id="程序参数"><a href="#程序参数" class="headerlink" title="程序参数"></a>程序参数</h4><p>main函数的参数有两个参数,前者a是告诉后者b数组中有多少个元素</p><p>后者b是在执行时可以带上的任何字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> *b[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a; i++ ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d:%s\n"</span>, i, b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-07_19:02.png" alt=""></p><h4 id="输入输出-1"><a href="#输入输出-1" class="headerlink" title="输入输出"></a>输入输出</h4><h5 id="putchar"><a href="#putchar" class="headerlink" title="putchar"></a>putchar</h5><p><code>int  putchar(int x)</code></p><p>把一个字符输出在标准输出上</p><p>当输出EOF( -1 )代表输出失败</p><p>参数是int类型,但只能接收一个字符,返回类型也是in</p><h5 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h5><p>不需要参数<code>int getchar(void)</code></p><p>返回从标准输入读取到的字符</p><p>返回类型是int,目的是为了返回EOF( -1 )表示标准输入结束</p><p><p>当程序获取到EOF状态,即当用户使用<code>Ctrl + D</code>中断运行,就会在标准输出得到EOF结束程序运行</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-07_20:11.png" alt="06-07_20:11"></p><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><p> 在头文件string.h中有很多函数可以调用</p><h5 id="strlen-string-length"><a href="#strlen-string-length" class="headerlink" title="strlen (string length)"></a>strlen (string length)</h5><p>返回字符串的长度(不包含结尾的\0)<code>size_t strlen(const char *s);</code></p><p>不会修改参数表中的参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[] = <span class="string">"Hello"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof = %lu\n"</span>, <span class="keyword">sizeof</span>(s)); <span class="comment">// sizeof = 6</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"strlen = %lu\n"</span>, <span class="built_in">strlen</span>(s)); <span class="comment">// strlen = 5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仿照strlen函数写一个自己的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *s )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (  s[time] != <span class="string">'\0'</span> ) &#123;</span><br><span class="line">        time++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[] = <span class="string">"Hello"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof = %lu\n"</span>, <span class="keyword">sizeof</span>(s)); <span class="comment">// sizeof = 6</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"strlen = %lu\n"</span>, my(s));   <span class="comment">// strlen = 5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="strcmp-string-compare"><a href="#strcmp-string-compare" class="headerlink" title="strcmp (string compare)"></a>strcmp (string compare)</h5><p>对比两个字符串的大小,同样不会修改字符串<code>int strcmp(const char *s1,const char *s2)</code></p><p>前者比较后者,前者与后者相同则返回0,前者小于后者则结果小于0,前者大于后者则结果大于0</p><p>不相等的结果取决于等于两者之间的差值,按照<code>ASCII表</code>中字符的顺序计算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[] = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="keyword">char</span> s2[] = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="built_in">strcmp</span>(s1,s2)); <span class="comment">// 0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仿照strcmp函数写一个自己的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s1,<span class="keyword">const</span> <span class="keyword">char</span> *s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ( *s1 == *s2 &amp;&amp; *s1 != <span class="string">'\0'</span> )&#123;</span><br><span class="line">        s1++;</span><br><span class="line">        s2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *s1 - *s2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[] = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="keyword">char</span> s2[] = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, my(s1,s2)); <span class="comment">// 0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="strcpy-string-copy"><a href="#strcpy-string-copy" class="headerlink" title="strcpy (string copy)"></a>strcpy (string copy)</h5><p><code>char *strcpy(char *restrict s1,const char *restrict s2)</code>将后者的内容拷贝到前者</p><p><strong><em>restrict表示这两个字符串在地址中没有重叠部分</em></strong></p><p>strcpy具有返回值,能够继续参与代码的其他运算,返回值是前者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[] = <span class="string">"123"</span>;</span><br><span class="line">    <span class="keyword">char</span> s2[] = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"s1 = %s"</span>, <span class="built_in">strcpy</span>(s1, s2));  <span class="comment">// abc</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="strcat-concatenate-string"><a href="#strcat-concatenate-string" class="headerlink" title="strcat (concatenate string)"></a>strcat (concatenate string)</h5><p><code>char *strcat(char *restrict s1,const char *restrict s2)</code>把后者连接到前者的后面,拼凑成一个字符串</p><p><strong><em>restrict表示这两个字符串在地址中没有重叠部分</em></strong></p><p>返回值是s1,在完成拼凑的这个操作时,得确保s1的空间是足够容纳s2的内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[<span class="number">12</span>] = <span class="string">"Hello,"</span>;</span><br><span class="line">    <span class="keyword">char</span> s2[<span class="number">12</span>] = <span class="string">"World"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"s1 = %s"</span>, <span class="built_in">strcat</span>(s1,s2));  <span class="comment">// Hello,World</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="strchr-locate-character-in-string"><a href="#strchr-locate-character-in-string" class="headerlink" title="strchr (locate character in string)"></a>strchr (locate character in string)</h5><p><code>char *strchr(const char *s, int c);</code>返回一个指针,指向变量c第一次出现的位置,自左向右寻找</p><p><code>char *strrchr(const char *s, int c);</code>返回一个指针,指向变量c第一次出现的位置,自右向左寻找</p><p>当返回Null时表示没有找到,非0的值表示寻找到了,并返回指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[] = <span class="string">"11223344"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = <span class="built_in">strchr</span>(s, <span class="string">'2'</span>); <span class="comment">// 223344</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="定位第二个相同字符"><a href="#定位第二个相同字符" class="headerlink" title="定位第二个相同字符"></a>定位第二个相同字符</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[] = <span class="string">"11223344"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = <span class="built_in">strchr</span>(s, <span class="string">'2'</span>); <span class="comment">// 223344</span></span><br><span class="line">    p = <span class="built_in">strchr</span>(p + <span class="number">1</span>, <span class="string">'2'</span>); <span class="comment">// 23344</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="反向定位"><a href="#反向定位" class="headerlink" title="反向定位"></a>反向定位</h6><p>第一个2开始算作p[0]以此类推</p><p>首先将p[0]的值备份一下,然后让它变成\0代表结束</p><p>动态分配一个临时的变量t去保存字符串s的值,也就是11</p><p>t = |  1  |  1  |  \0  |  2  |  3  |  3  |  4   |  4  |  \0  |</p><p>再恢复*p的值</p><p>s = |  1  |  1  |  2  |  2  |  3  |  3  |  4   |  4  |  \0  |</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[] = <span class="string">"11223344"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = <span class="built_in">strchr</span>(s, <span class="string">'2'</span>); <span class="comment">// 223344</span></span><br><span class="line">    <span class="keyword">char</span> c = *p; <span class="comment">// char c = p[0] = 2; 备份*p</span></span><br><span class="line">    *p = <span class="string">'\0'</span>; <span class="comment">// p[0] = '\0'</span></span><br><span class="line">    <span class="keyword">char</span> *t = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>((s)+<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">strcpy</span>(t, s); <span class="comment">// 将s的值拷贝到t中</span></span><br><span class="line">    *p = c; <span class="comment">// 恢复*p</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, t); </span><br><span class="line">    <span class="built_in">free</span>(t); <span class="comment">// 释放临时变量t的空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="strstr-locate-a-substring-in-a-string"><a href="#strstr-locate-a-substring-in-a-string" class="headerlink" title="strstr (locate a substring in a string)"></a>strstr (locate a substring in a string)</h5><p><code>char *strstr(const char *s1, const char *s2);</code>从字符串s2中定位s1的内容,并返回一个指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[<span class="number">10</span>] = <span class="string">"11223344"</span>;</span><br><span class="line">    <span class="keyword">char</span> s2[<span class="number">10</span>] = <span class="string">"22"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = <span class="built_in">strstr</span>(s1,s2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, p); <span class="comment">// 223344</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>char *strcasestr(const char *s1, const char *s2);</code>从字符串s2中定位s1的内容忽略大小写,并返回一个指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[<span class="number">10</span>] = <span class="string">"aabbcdDee"</span>;</span><br><span class="line">    <span class="keyword">char</span> s2[<span class="number">10</span>] = <span class="string">"Dd"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = strcasestr(s1,s2); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, p); <span class="comment">// dDee</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>char *strnstr(const char *s1, const char *s2, size_t 3);</code>仅从3个长度的字符串s2中定位s1的内容,并返回一个指针,当超过3个长度会返回null</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[<span class="number">10</span>] = <span class="string">"123456789"</span>;</span><br><span class="line">    <span class="keyword">char</span> s2[<span class="number">10</span>] = <span class="string">"5"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = strnstr(s1,s2,<span class="number">7</span>); <span class="comment">// 长度可以为7</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, p);  <span class="comment">// 56789</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="限制字符串数量"><a href="#限制字符串数量" class="headerlink" title="限制字符串数量"></a>限制字符串数量</h5><h6 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy"></a>strncpy</h6><p>限制拷贝的最大字符数为12</p><p><code>char *strncpy(char *restrict s1,const char *restrict s2,size_t n);</code> – &gt; <code>strncpy(s1,s2,12);</code></p><h6 id="strncat"><a href="#strncat" class="headerlink" title="strncat"></a>strncat</h6><p>限制能将后者连接到前者的最大字符数为12</p><p><code>char *strncat(char *restrict s1,const char *restrict s2,size_t n);</code> –&gt; <code>strncat (s1,s2,12);</code></p><h6 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp"></a>strncmp</h6><p>限制仅对比开头的三个字符</p><p><code>int strncmp(const char *s1,const char *s2,size_t  n);</code> –&gt; <code>strncmp(s1,s2,3)</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(8)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-8/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-8/</url>
      
        <content type="html"><![CDATA[<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><a id="more"></a><h4 id="取地址"><a href="#取地址" class="headerlink" title="取地址"></a>取地址</h4><p>内存分配的任务是通过指针去执行的,每一个变量在内存中都会有一个位置,可以通过<code>&amp;</code> 运算符去访问变量在内存中的地址</p><p>地址的大小是否与int相同取决于编译器</p><h5 id="运算符-amp"><a href="#运算符-amp" class="headerlink" title="运算符&amp;"></a>运算符&amp;</h5><p>获得变量的地址,它的操作数必须是变量</p><p><code>scanf(&quot;%d&quot;, &amp;x);</code></p><p>&amp;只能对一个明确的变量去取地址,不能对没有地址的东西取地址(包括表达式和运算)</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p><code>%p</code> 可以输出变量的地址</p><p> <code>printf(&quot;%p&quot;, &amp;x);</code> 输出x变量在内存中的地址</p><h5 id="相邻变量的地址"><a href="#相邻变量的地址" class="headerlink" title="相邻变量的地址"></a>相邻变量的地址</h5><p>本地变量在内存存放在堆栈里,堆栈是自顶向下分配的,先定义的变量在后定义变量的上方,紧紧相连,但地址间隔着一个int大小的字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;i); <span class="comment">// 0x7ffee5e29b58</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p"</span>, &amp;j);  <span class="comment">// 0x7ffee5e29b54</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组的地址"><a href="#数组的地址" class="headerlink" title="数组的地址"></a>数组的地址</h5><p>整个数组的地址与数组中第一个元素即<code>x[0]</code>相同</p><p>相邻的数组元素的地址相隔一个int的字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;x);       <span class="comment">// 0x7ffee5dd7b40</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;x[<span class="number">0</span>]);    <span class="comment">// 0x7ffee5dd7b40</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;x[<span class="number">1</span>]);    <span class="comment">// 0x7ffee5dd7b44</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针-1"><a href="#指针-1" class="headerlink" title="指针"></a>指针</h4><p><strong><em>保存地址的变量</em></strong></p><p>指针是一个变量,其值为另一个变量的地址,即内存位置的直接地址 就像其他变量或常量一样,必须在使用指针存储其他变量地址之前,对其进行声明</p><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><p><code>数据类型</code> *<code>变量名</code> = &amp;<code>变量名</code></p><p><code>int *p = &amp;x;</code>变量p的值存储着变量x在内存中的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;x;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;x); <span class="comment">// 0x7ffee2330b58</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, p); <span class="comment">// 0x7ffee2330b58</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>int *p,i;</code>是定义了一个指针类型p和int类型i,并非两个都是指针,需要二者都是指针时需要在第二个变量前也加上*</p><h5 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h5><p>指针变量的值就是普通变量在内存的地址,而普通变量的值是实际意义上的值</p><h5 id="指针作为参数"><a href="#指针作为参数" class="headerlink" title="指针作为参数"></a>指针作为参数</h5><p><code>int i = 0;x(&amp;i);</code>  把变量i在内存中的地址通过传参的方式传递给函数x</p><p><code>void x(int *p)</code>在被调用的时候得到了变量i的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x</span><span class="params">(<span class="keyword">int</span> *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;i = %p\n"</span>, &amp;i); <span class="comment">// 0x7ffee3744b58</span></span><br><span class="line">    x(&amp;i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x</span><span class="params">(<span class="keyword">int</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p = %p\n"</span>, p);  <span class="comment">// 0x7ffee3744b58</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通过指针访问变量"><a href="#通过指针访问变量" class="headerlink" title="通过指针访问变量"></a>通过指针访问变量</h5><p>*是一个弹幕运算符,可以用来访问指针的值(变量的地址)所表示的变量的值</p><p>指针类型的变量可以作为左值也可以作为右值,与上一篇笔记中谈到的数组一样,当它在左边时是作为写入的方式,在右边时是被读取</p><p>左值与右值并非变量而是特殊的值,是表达式计算的结果</p><p><code>int i = *p</code> 把指针p所指向的变量的值赋值给i</p><p><code>*p = i + 1;</code> i + 1的值赋值给指针p所指向的变量的值</p><p>有点绕,但是不难理解~</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x</span><span class="params">(<span class="keyword">int</span> *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;i = %p\n"</span>, &amp;i); <span class="comment">// 0x7ffee3744b58</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"i = %d\n"</span>, i);   <span class="comment">// 1</span></span><br><span class="line">    x(&amp;i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x</span><span class="params">(<span class="keyword">int</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p = %p\n"</span>, p);   <span class="comment">// 0x7ffee3744b58</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*p = %d\n"</span>, *p); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⇩因为传递给x的是i在内存中的地址,所以当我们修改*p也就是修改变量i在内存中地址上实际的值即 <code>*p= i = 2</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x</span><span class="params">(<span class="keyword">int</span> *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;i = %p\n"</span>, &amp;i); <span class="comment">// 0x7ffee3744b58</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"i = %d\n"</span>, i);   <span class="comment">// 1</span></span><br><span class="line">    x(&amp;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"i = %d\n"</span>, i);   <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x</span><span class="params">(<span class="keyword">int</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p = %p\n"</span>, p);   <span class="comment">// 0x7ffee3744b58</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*p = %d\n"</span>, *p); <span class="comment">// 1</span></span><br><span class="line">    *p = <span class="number">2</span>;  <span class="comment">// 将2的值赋值给了实际变量i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="amp-互相反作用"><a href="#amp-互相反作用" class="headerlink" title="&amp;*互相反作用"></a>&amp;*互相反作用</h5><ul><li>*&amp;</li></ul><p><code>new = *&amp;i</code>  =  <code>new = *(&amp;i)</code>  = <code>new = *(0x7ffee3744b58)</code> = <code>new = i</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;i = %p\n"</span>, &amp;i); <span class="comment">// 0x7ffee3744b58</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"i = %d\n"</span>, i);   <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">int</span> *p = &amp;i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*p = %p\n"</span>, p);  <span class="comment">// 0x7ffee3744b58</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">new</span> = *&amp;i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"new = %d"</span>, <span class="keyword">new</span>); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>&amp;*同理</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>别在定义指针后还没指向任何变量就开始使用指针</p><p>一定要按照规范写法去定义指针变量<code>int *p = &amp;x;</code></p><h4 id="数组与指针"><a href="#数组与指针" class="headerlink" title="数组与指针"></a>数组与指针</h4><ul><li><p>数组变量是特殊的指针,数组变量本身表达的就是在内存中的地址</p><p><code>int a[10]; int *p =a;</code> 无需使用<code>&amp;</code>取地址</p></li><li><p>但是数组中的元素表达的是单个的变量,这时就需要使用<code>&amp;</code>去取地址</p><p><code>a == &amp;a[0]</code> a的地址和a[0]的地址是一样的概念</p></li><li><p>甚至[]运算符不仅可以对数组用,还可以对指针使用</p><p><code>int x = 2;int *p = &amp; x;p[0] == x[0]</code>可以将普通变量x看作是只有一个元素的数组,所以<code>p[0] = 2</code></p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-03_17:29.png" alt="06-03_17:29"></p></li><li><p>除了可以读取值以外还能往数组里写入值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %d\n"</span>, x); <span class="comment">// x = 2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p[0] = %d\n"</span>, p[<span class="number">0</span>]); <span class="comment">// p[0] = 2</span></span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %d"</span>, x); <span class="comment">// 被修改后x = 4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="函数-数组传值"><a href="#函数-数组传值" class="headerlink" title="函数_数组传值"></a>函数_数组传值</h5><ul><li><p>函数参数表中的数组实际上是指针,即<code>sizeof[a] == sizeof (int *)</code></p></li><li><p>在函数中声明的时候可以用<code>*数组名称</code>的方式,还可以继续用数组的运算符[]进行计算</p></li></ul><h5 id="数组参数的等价关系"><a href="#数组参数的等价关系" class="headerlink" title="数组参数的等价关系"></a>数组参数的等价关系</h5><p>在参数表和函数原型中它们的表达意思都是一样的</p><p><code>int sum(int *a,int n);</code> == <code>int sum(int *,int);</code> == <code>int sum(int a[],int n);</code> == <code>int sum(int [],int);</code></p><h4 id="指针与const"><a href="#指针与const" class="headerlink" title="指针与const"></a>指针与const</h4><h5 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a>const指针</h5><ul><li><p>*在const的左边表示指针是const</p><p>当const指针指向了某个变量的地址之后,就无法再指向其他变量了,即无法修改变量的地址(指针的值)了</p><p><code>p = &amp;y</code>无法通过编译,因为变量p是const类型的,不能被分配任何值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %d\n"</span> ,*p); <span class="comment">// 2</span></span><br><span class="line">    *p = <span class="number">30</span>; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %d"</span> ,*p); <span class="comment">// 30</span></span><br><span class="line">    p = &amp;y; <span class="comment">// Cannot assign to variable 'p' with const-qualified type 'int *const'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>*在const右边表示指针变量是const</p><p>const指针变量指向了某个变量的地址之后,就不能通过这个指针去修改那个变量了,并非真正意义上让普通变量变成了const</p><p><code>*p = 30</code>无法通过编译,因为指针变量*p是一个只读的变量</p><p>其他修改指针的操作可以正常编译</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> *p = &amp;x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x(%%p) = %p\n"</span>, p); <span class="comment">// 0x7ffeebb2ab58</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x(%%d) = %d\n"</span>, *p); <span class="comment">// 2</span></span><br><span class="line">    *p = <span class="number">30</span>; <span class="comment">// Read-only variable is not assignable</span></span><br><span class="line">    p = &amp;y;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"y(%%p) = %p"</span>, p); <span class="comment">// 0x7ffeebb2ab54</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="转换const"><a href="#转换const" class="headerlink" title="转换const"></a>转换const</h5><p>你可以将一个普通变量转换成const类型,让其在函数中无法被修改</p><h5 id="const数组"><a href="#const数组" class="headerlink" title="const数组"></a>const数组</h5><p>因为数组已经是一个特殊的const类型的指针了,所以在数组前加上const能让数组中的每个元素都变成const类型的变量</p><p><code>const int x[] = {1,2,3,4,5,6,7,8,9,10,};</code></p><p>当用这种方式创建数组时,就需要在初始化时就对数组进行赋值,因为你无法再修改数组中的元素了</p><p>因为把数组传入给函数时传递的是地址,所以在函数中可以修改数组的值,所以传值给函数的时候也可以让函数声明数组是const,这样就能保护数组在函数中不会被修改</p><p><code>int a(const int x[]);</code></p><h4 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h4><p>指针是用十六进制的地址表示普通变量的值,如果对指针执行算数运算可以让地址指向的数组元素向前或向后移动</p><p><strong><em>如果指针不是指向一片如数组一样连续分配的空间,那么这种运算没有意义可言</em></strong></p><h5 id="加减、递增递减"><a href="#加减、递增递减" class="headerlink" title="加减、递增递减"></a>加减、递增递减</h5><p>让指针加1的操作并非让地址真的+1了,加的是sizeof的值,也就是指针所指的普通变量的数据类型的大小</p><ul><li>char类型的指针+1,它的地址加上的是char类型的大小</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,&#125;;</span><br><span class="line">    <span class="keyword">char</span> *p = a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"char = %d\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>)); <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p = %p\n"</span>, p); <span class="comment">// 0x7ffee5bbeabe   +1⇩</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p+1 = %p\n"</span>, p + <span class="number">1</span>); <span class="comment">// 0x7ffee76f5abf</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同理,当类型是int的时候,地址+1的操作就是加上一个int类型的大小</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,&#125;;</span><br><span class="line">    <span class="keyword">int</span> *p = a1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"int = %d\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// 4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p = %p\n"</span>, p); <span class="comment">// 0x7ffee7ac6aa0  +1⇩</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p+1 = %p\n"</span>, p + <span class="number">1</span>); <span class="comment">// 0x7ffee7ac6aa4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>*p + 1</code>没有意义,*(p + 1)才是指向数组的下一个元素</p></li><li><p>因为<code>*(p + 1) = a[1]</code>,<code>*(p + n) = a[n]</code> </p></li><li><p>那么既然加法可以看作是向后移动,减法就是向前移动了</p></li><li><p>递增递减相应的也是向前向后挪一个元素的动作</p></li></ul><p>当两个指针相减的时候,减出来的差并非是地址的差,而是地址的差/数据类型大小的差</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,&#125;;</span><br><span class="line">    <span class="keyword">int</span> *p = a1;</span><br><span class="line">    <span class="keyword">int</span> *p1 = &amp;a1[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"int = %d\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// 4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p = %p\n"</span>, p); <span class="comment">// 0x7ffee7ac6aa0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p1 = %p\n"</span>, p1); <span class="comment">// 0x7ffee9f67ab4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p1-p = %d"</span>, p1 - p); <span class="comment">// 5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>0xb4 = 180</code> - <code>0xa0 = 160</code>  = <code>0x14</code> = <code>20</code></p><p><code>20 / 4(sizeof(int))= 5;</code></p><h5 id="p"><a href="#p" class="headerlink" title="*p++"></a>*p++</h5><p>++的优先级比*来的高,所以先算p++的结果</p><p>作用于数组类的连续空间操作</p><p>使得遍历数组元素时有更高效率的办法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,&#125;;</span><br><span class="line">    <span class="keyword">int</span> *p = a,t = *p;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span> = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">while</span> ( *p &lt; <span class="built_in">size</span> &amp;&amp; *p &gt;= t ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"p = %d\n"</span>, *p);</span><br><span class="line">        *p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><p><code>&lt;,&lt;=,==,&gt;,&gt;=,!=</code>都可以使用,用来比较普通变量在内存中的地址的大小</p><p>因为数组的元素的地址是线性递增的,所以<code>a[5] &gt; a[4]</code></p><h5 id="0地址"><a href="#0地址" class="headerlink" title="0地址"></a>0地址</h5><p>指针的地址不应该被写入0地址</p><p>但可以用0地址表示特殊的事情</p><ul><li>返回的指针是无效的</li><li>指针没有被真正初始化(先初始化为0)</li></ul><p>NULL在事先定义在C语言中,它表示0地址</p><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><p>为了避免错用指针,不同类型的指针是不能直接互相赋值的</p><p>无论指向什么类型,所有的指针大小都是不一样的</p><h6 id="void"><a href="#void" class="headerlink" title="void"></a>void</h6><p>转换类型</p><p>void* 表示指向了未知类型的指针</p><p><code>int *p = &amp;i;</code> <code>void *q = (void*)p;</code> 并没有改变p所指i变量的类型,而是从q去访问i的时候不再将i当做是int类型</p><h4 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h4><h5 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h5><p>格式:<code>数据类型 *变量名 = (数据类型*)malloc(x*sizeof(数据类型))</code></p><p><code>int *p = (int *)malloc(n * sizeof(int);</code></p><p>在使用malloc函数之前需要在头文件中添加<code>stdlib.h</code></p><p>malloc 需要的是参数不是数组里有多少个元素,而是有多少个字节,用数组总共的元素数量去乘以int类型的字节数就能得到malloc需要的参数了</p><p>malloc返回的结果是void*所以还需要用强制转换成int类型的值才能当作元素个数使用</p><p>由于数组是特殊的指针,所以这里定义的指针可以拿来当数组去使用</p><h5 id="free"><a href="#free" class="headerlink" title="free"></a>free</h5><p>一个malloc对应一个free,程序中出现malloc就带上free</p><p>释放内存,只能释放malloc使用的原始地址,即使被修改过也不行</p><p>free过的地址不能再次free</p><h4 id="指针应用场景"><a href="#指针应用场景" class="headerlink" title="指针应用场景"></a>指针应用场景</h4><ol><li><p>交换两个变量的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a , b;</span><br><span class="line">    a = <span class="number">5</span>;</span><br><span class="line">    b = <span class="number">6</span>;</span><br><span class="line">    swap(&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d,b = %d\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回多个值</p><p>找出数组中最小和最大的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">minmax</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> *<span class="built_in">min</span>, <span class="keyword">int</span> *<span class="built_in">max</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">25</span>,<span class="number">39</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">99</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>,<span class="built_in">max</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span> = <span class="keyword">sizeof</span>(a)/ <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">    minmax(a,<span class="built_in">size</span>,&amp;<span class="built_in">min</span>,&amp;<span class="built_in">max</span>); <span class="comment">// 传递a数组,a数组的元素数量,min和max变量的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"min = %d,max = %d"</span>, <span class="built_in">min</span>, <span class="built_in">max</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">minmax</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> *<span class="built_in">min</span>, <span class="keyword">int</span> *<span class="built_in">max</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    *<span class="built_in">min</span> = *<span class="built_in">max</span> = a[<span class="number">0</span>]; <span class="comment">// 初始化min和max变量的值为a数组第一个值</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>; i++ ) &#123; <span class="comment">// 历遍数组</span></span><br><span class="line">        <span class="keyword">if</span> ( a[i] &lt; *<span class="built_in">min</span> )&#123; </span><br><span class="line">            *<span class="built_in">min</span> = a[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( a[i] &gt; *<span class="built_in">max</span> )&#123;</span><br><span class="line">            *<span class="built_in">max</span> = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数返回异常值</p><p>函数返回运算的状态,而结果通过指针去返回</p><p>当任何数值都是有效的可能结果时,得分开返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">if</span> (divide( a, b, &amp;c ))&#123; <span class="comment">// 将a，b的值，c的地址传递给divide函数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d/%d=%d"</span>, a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> *res )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( b == <span class="number">0</span>)&#123;</span><br><span class="line">        ret = <span class="number">-1</span>; <span class="comment">// 如果分母是0的话返回错误值-1</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        *res = a / b; <span class="comment">// 否则的话返回值是a除以b的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><p>啊这…写得也太多了吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(7)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-7/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-7/</url>
      
        <content type="html"><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><a id="more"></a><p>数组可以存储一个固定大小的相同类型元素的顺序集合</p><p>数组的目的是存储一系列数据,但它往往被认为是一系列相同的变量</p><p>数组一旦被创建了就不能再改变它的大小了,元素在内存中是连续依次排列的</p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><h5 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h5><ul><li><p><code>数据类型</code> <code>变量名称</code> <code>[元素数量]</code></p></li><li><p>元素的数量必须是整数</p><ul><li><p>例如:double number[5]</p><p>意味着这是一维数组,声明了一个类型为int包含了5个元素的数组number,它可以容纳5个int类型的数据</p></li></ul></li></ul><h5 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h5><ol><li><p>可以逐个初始化数组,也可以使用一条初始化语句<code>数据类型</code> <code>变量名称</code> <code>[元素数量]</code> = { 1000.0 , 2.0 , 3.4 , 7.0 , 50.0 }</p><p>如果元素数量很多个,初始化的值只有一个的情况下,除了第一个元素会是初始化的值以外,其余全是0</p><p>指定元素初始化<code>数据类型</code> <code>变量名称</code> <code>[元素数量]</code> = { [0] = 1000.0 , [2] = 3.4 , 7.0 , [4] =  50.0 },当指定了索引的时候,初始化会根据索引来定位,没有指定索引的数据接在前面一个数据的后面,其他没有初始化的值仍然是0</p><p>如果没有声明元素数量的话,则按照初始时元素的个数来定义</p></li><li><p>创建一个数组,它与声明数组时的变量名称是相同的<code>变量名称</code> <code>[索引]</code> = <code>值</code></p><p><strong><em>索引从0开始计数</em></strong></p><p>从元素0开始,数组后面的每个索引都是数组的个数减1</p><p>索引有效的范围是从[0 ~ 数组大小-1],一旦越界可能会出现程序崩溃等问题</p><p><code>number[4] = 50.0</code> 意味着number数组里的第五个元素的值是50.0</p><p>除了可以直接写索引数值外还可以写上变量,但是如果你需要依次向后填入数值的话,这个变量需要变化</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/05-31_11:20.png" alt="05-31_11:20"></p></li></ol><h5 id="赋值数组元素"><a href="#赋值数组元素" class="headerlink" title="赋值数组元素"></a>赋值数组元素</h5><ul><li>数组元素可以通过<code>数组名称</code> <code>[索引]</code>进行访问,所以也能将索引对应的元素赋值给其他变量</li><li>可以出现在复制的左边或者右边,把数组放在右边就是读取它的值,放在左边就是将右边的数值写入数组</li><li><code>number[3] = number[5] + 6</code> 即把数组中的第六个元素的值加上六后写入到数组第四个元素中</li><li><code>double num4 = number [3]</code>即把数组中的第四个元素的值赋给了num4变量</li></ul><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><p>通常采取for循环的方式,让循环的变量i从<code>0到i&lt;元素数量</code>,这样循环体内最大的i正好是数组最大的有效索引</p><p>而不可以将循环结束的条件&lt;=元素数量,也不可以在离开循环之后继续将i的值来作为数组元素的索引</p><h4 id="数组的大小"><a href="#数组的大小" class="headerlink" title="数组的大小"></a>数组的大小</h4><p>sizeof函数能给出整个数组所占据内容的大小,单位是字节</p><p>使用<code>sizeof(数组名称)</code>可以得到整个数组的字节<code>sizeof(number)/sizeiof(number[0])</code></p><p>sizeof(number[0])给出了数组中单个元素的大小,于是相除就得到了数组的元素个数</p><p>这样的计算方式能够让代码复用,当修改数组中初始的数据时,不需要修改遍历的代码</p><h4 id="数组传值"><a href="#数组传值" class="headerlink" title="数组传值"></a>数组传值</h4><ol><li>如果想把a数组中的所有元素直接赋值给b数组,只能通过for循环的方式实现</li></ol><ul><li>数组变量本身不能被赋值</li><li>需要赋值的时候只能采取遍历将一个数组中的所有元素交给另一个数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; length (number的元素数量) ; i++ )&#123;</span><br><span class="line"><span class="keyword">new</span>[i] = number[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>当数组作为函数参数时,往往还必须再用另一个函数来传入数组的大小</li></ol><ul><li>不能在[]中给出数组的大小</li><li>不能再利用sizeof去计算数组的元素个数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secondary</span><span class="params">(<span class="keyword">int</span> <span class="built_in">size</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> main</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">size</span> = <span class="keyword">sizeof</span>(number)/ <span class="keyword">sizeof</span>(number[<span class="number">0</span>]);</span><br><span class="line">secondary(<span class="built_in">size</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secondary</span><span class="params">(<span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><ol><li><p>写出一个程序计算用户输入一个数字的数量,用户可以输入这么多数量的数字,当输入-1的时候结束用户输入,计算这些数字的平均数,并输出所有大于平均数的数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入数字的数量："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;time);</span><br><span class="line">    <span class="keyword">if</span> ( time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> num[time]; <span class="comment">// C99的特性,可以根据动态的变量去定义数组数量</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        <span class="keyword">for</span> ( time = <span class="number">0</span>; x != <span class="number">-1</span> ; time++) &#123; <span class="comment">// time从0开始,每轮time++,直到x = -1结束循环</span></span><br><span class="line">            num[time] = x;</span><br><span class="line">            sum += x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x); <span class="comment">// 输入-1结束循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">double</span> avg = sum / time; <span class="comment">// 计算平均数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num[i] &gt; avg) &#123; <span class="comment">//  num[i] = num[time] = x &gt; avg</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写出一个程序,输入数量不确定的[0,9]范围内的整数,统计每一种数字出现的次数,当输入-1的时候表示结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">10</span>; <span class="comment">// 定义常量NUM的值为 10</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> time[NUM] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 有10个int类型的数据,并将它们全都初始化为0</span></span><br><span class="line">    <span class="keyword">while</span> ( x != <span class="number">-1</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( x &gt; <span class="number">0</span> &amp;&amp; x &lt;= NUM - <span class="number">1</span> )&#123;</span><br><span class="line">            time[x]++; <span class="comment">// 当x满足0 &lt; x &lt; 9,让time[ x：0 ~ 9 ]++</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x); <span class="comment">// 输出-1结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; NUM ; i++) &#123; <span class="comment">// i : 0 ~ 9</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d:%d\n"</span>, i, time[i]); <span class="comment">// time[i：0 ~ 9 ]出现过几次就会输出多少次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/05-31_16:40.png" alt="05-31_16:40"></p></li><li><p>当用户输入某个数值时,从一组固定的数据中寻找是否存在,如果存在就输出它和它在数组中的位置,不存在就输出-1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">( <span class="keyword">int</span> y, b[], <span class="built_in">size</span> )</span></span>; <span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">1</span> , <span class="number">3</span> , <span class="number">5</span> , <span class="number">7</span> , <span class="number">9</span> , <span class="number">2</span> , <span class="number">4</span> , <span class="number">6</span> , <span class="number">8</span> , <span class="number">10</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span> = <span class="keyword">sizeof</span>(a)/ <span class="keyword">sizeof</span>(a[<span class="number">0</span>]); <span class="comment">// 得到元素个数</span></span><br><span class="line">    <span class="keyword">int</span> loc;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入一个数字:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    loc = search( x , a , <span class="built_in">size</span> ); <span class="comment">// 传值给search函数，返回loc = ret;</span></span><br><span class="line">    <span class="keyword">if</span> ( loc != <span class="number">-1</span> )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d在第%d个位置上\n"</span>, x, loc);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d不存在\n"</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">( <span class="keyword">int</span> y, b[], <span class="built_in">size</span> )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123; <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">if</span> ( b[i] == y )&#123; <span class="comment">// 当数组中的数等于用户输入数时返回ret = i 的值</span></span><br><span class="line">            ret = i; <span class="comment">// 否则返回ret = -1</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>老朋友:素数</p><p><font color=##777777>// 数组都没整明白又来让我脑壳痛的素数🙃,先囫囵吞枣消化再说</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 构建n以内的素数表</span></span><br><span class="line"><span class="comment"> * 0. 定义，并初始化数组prime[n]所有元素为1</span></span><br><span class="line"><span class="comment"> *    当prime[x]为1则表示x是素数</span></span><br><span class="line"><span class="comment"> * 1. 让x的值为2</span></span><br><span class="line"><span class="comment"> * 2. 让2x、3x、4x 直至到n倍数的数标记为非素数</span></span><br><span class="line"><span class="comment"> * 3. 如果x是素数，则对于（ i = 2; x * i &lt; n; i++ ）令prime[i * x] = 0</span></span><br><span class="line"><span class="comment"> * 4. 令x为下一个没有被标记的非素数的数重复步骤2</span></span><br><span class="line"><span class="comment"> *    直到所有的数都已经尝试完成</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> isPrime[n];</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>;  i &lt; n; i++) &#123;</span><br><span class="line">        isPrime[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( x = <span class="number">2</span>;  x &lt; n ; x++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( isPrime[x] )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( i = <span class="number">2</span>; i * x &lt; n; i++) &#123;</span><br><span class="line">                isPrime[i * x] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">2</span>;  i &lt; n ; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( isPrime[i])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h4><ul><li><p><code>数据类型</code> <code>变量名</code> <code>[行]</code> <code>[列]</code></p></li><li><p>例如int a[3][5]可以理解成a是一个3行5列的矩阵</p><table><thead><tr><th>a[0][0]</th><th>a[0][1]</th><th>a[0][2]</th><th>a[0][3]</th><th>a[0][4]</th></tr></thead><tbody><tr><td>a[1][0]</td><td>a[1][1]</td><td>a[1][2]</td><td>a[1][3]</td><td>a[1][4]</td></tr><tr><td>a[2][0]</td><td>a[2][1]</td><td>a[2][2]</td><td>a[2][3]</td><td>a[2][4]</td></tr></tbody></table></li></ul><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>与一维数组不同的是,二维数组的遍历需要将行和列都带上,外层是行,内层是列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ )&#123;</span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">a[i][j] = i * j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>a[x][y]是一个int</li><li>代表第x行第y列上的元素</li></ul><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][<span class="number">5</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>列数是必须指定的,但是行数可以让编译器自己去生成</li><li>每行一个<code>{}</code>,使用逗号分隔</li><li>和一维数组一样,如果省略则按零补上</li><li>标上行与列可以定位数组中的元素位置</li></ul><h3 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h3><p>…</p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(6)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-6/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-6/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><a id="more"></a><h3 id="函数概念"><a href="#函数概念" class="headerlink" title="函数概念"></a>函数概念</h3><p>函数的存在能让代码复用性更大化,在很多重复的代码中,将重复的部分写成一个自己定义的函数,就只需要在主函数中调用定义函数中的变量去使用就好了</p><p>函数是一块代码,接受零个或者多个参数,做某件事情,并返回零个或者一个值</p><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x</span> <span class="params">(<span class="keyword">int</span> i)</span></span>&#123; <span class="comment">// 这一整行是函数头,void是返回类型 ,x 是函数名,(int i)是参数表</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 在大括号内的表达式是函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><ul><li><p>调用函数需要在调用它的地方中写上<code>函数名(参数值)</code></p></li><li><p><code>()</code> 起到了表达函数调用的重要作用,即使是定义的函数没有参数也需要写上<code>()</code></p></li><li><p>如果函数有参数,在调用的时候需要给出正确的数量和顺序</p></li><li><p>这些传递给参数的值会被按照顺序依次用来初始化函数中的参数</p></li><li><p>当存在多个参数表的时候,只需要按参数表的顺序去定义就好</p></li><li><p>函数是知道每一次是哪里调用的,它会返回到正确的地方</p></li><li><p>能够传递给函数的值是表达式的结果,其中表达式包括[字面量],[变量],[函数的返回值],[计算的结果]</p></li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li><p>在函数中出现return时停止函数的执行,并送出一个值</p></li><li><p>这个值会返回调用函数的地方</p></li><li><p>虽然一个函数中可以出现多个return,但不管是在表达式中写<code>return;</code> 还是在末尾写<code>return 表达式</code> 都是可以的,但是建议只有单一出口</p></li><li><p>函数的返回值可以复制给定义函数地方的变量,也可以再次传递给函数,甚至可以丢掉不再使用函数</p></li></ul><h4 id="空返回值"><a href="#空返回值" class="headerlink" title="空返回值"></a>空返回值</h4><ul><li><p>当你需要定义的是没有返回值的函数时,需要把返回类型修改成<code>void 函数名 (参数表)</code></p></li><li><p>可以不需要在末尾带上return,如果带上return不能使用带值的return</p></li><li><p>调用的时候不能做带有返回值的赋值</p></li><li><p>但是如果函数有返回值,则必须使用带值的return</p></li></ul><p><p>试试一个用函数实现的求和</p><ul><li>求出<code>1~10</code> <code>20~30</code> <code>35~45</code>的三个和</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = k; i &lt;= o; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d到%d的和是%d\n"</span>, k, o, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sum(<span class="number">1</span>, <span class="number">10</span>); <span class="comment">// void sum (int k = 1 ,int o = 10)</span></span><br><span class="line">    sum(<span class="number">20</span>, <span class="number">30</span>); <span class="comment">// void sum (int k = 20 ,int o = 30)</span></span><br><span class="line">    sum(<span class="number">35</span>, <span class="number">45</span>); <span class="comment">// void sum (int k = 35 ,int o = 45)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数顺序"><a href="#函数顺序" class="headerlink" title="函数顺序"></a>函数顺序</h4><p>C的编译器是自上而下顺序分析你写的代码</p><p>如果需要把定义函数写在main函数之下,需要在main函数之前申明一次</p><h5 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h5><ul><li><p>函数声明和函数定义的函数类型需要一致</p></li><li><p>函数头以分号<code>;</code>结尾,就构成了函数的原型</p></li><li><p>函数原型的目的的是告诉编译器你定义了一个或多个函数,需要调用时需要去寻找</p></li><li><p>在函数原型中包含了函数名称,函数参数(数量以及类型),还有返回类型 </p></li><li><p>函数原型里不写参数名称也可以正常编译,但是一般为了方便理解代码最好是写上</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> o)</span></span>; <span class="comment">// 这一整段叫函数原型 对函数的声明</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sum(<span class="number">1</span>, <span class="number">10</span>); <span class="comment">// void sum (int k = 1 ,int o = 10)</span></span><br><span class="line">    sum(<span class="number">20</span>, <span class="number">30</span>); <span class="comment">// void sum (int k = 20 ,int o = 30)</span></span><br><span class="line">    sum(<span class="number">35</span>, <span class="number">45</span>); <span class="comment">// void sum (int k = 35 ,int o = 45)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> o)</span> </span>&#123; <span class="comment">// 函数定义</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = k; i &lt;= o; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d到%d的和是%d\n"</span>, k, o, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li><p>调用函数的时给的值如果与参数的类型不一致很可能出现值的差错</p></li><li><p>因为编译器会自动帮你把类型转换好</p></li><li><p>如果你想传递的值是double类型,而函数中的参数类型是int,那么会自动转换成int类型</p></li><li><p>在传递值的时候一定要严格按照函数中的类型去调用</p></li></ul><h4 id="函数传值"><a href="#函数传值" class="headerlink" title="函数传值"></a>函数传值</h4><ul><li><p><strong><em>C语言在调用函数的时候,永远都只能传递值给函数</em></strong></p></li><li><p>每个函数都是一个独立空间,函数中的变量和参数都只存在于这个函数之中,和其他的函数没有任何关系</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>; <span class="comment">// 函数原型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">6</span>;</span><br><span class="line">    swap(a,b); <span class="comment">// swap ( int a = 5, b = 6);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d%d"</span>,a,b); <span class="comment">// 输出的是主函数中的a，b，与swap函数没有任何联系</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="局部-本地-变量"><a href="#局部-本地-变量" class="headerlink" title="局部(本地)变量"></a>局部(本地)变量</h4><p> 函数的每次运行都会产生一个独立的变量空间,在这个空间中的变量是函数这个运行所独有的,称之为本地变量</p><p>只要是在函数中定义的变量都叫做本地变量,参数表中的变量也一样是本地变量</p><h5 id="生存期和作用域"><a href="#生存期和作用域" class="headerlink" title="生存期和作用域"></a>生存期和作用域</h5><p>函数的生存期和作用域起止于大括号内的代码块</p><ul><li>生存期: 从这个变量开始出现到它消亡的过程</li><li>作用域: 从这个变量在代码中的什么范围内起作用</li></ul><h5 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h5><ul><li>本地变量定义在块中<ul><li>可以定义在函数的块中</li><li>可以定义在语句的块中</li><li>可以定义在任意地方生成的大括号中</li></ul></li><li>程序运行进入定义了变量的块之前,其中的变量不存在,离开这个块的时候,其中的变量就消失了</li><li>块外面定义的变量在不同块里面仍然有效</li><li>块里面定义了和外面同名的变量就会覆盖外面的变量</li><li>不能在同一个块内定义重名的变量</li><li>本地变量不会被默认初始化</li><li>而参数在进入函数的函数就已经被初始化了</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol><li><p>当函数没有参数的时候在原型的参数表中加上void可以明确表示没有任何参数<code>void x (void)</code></p><p>如果实际上有参数而在原型中没写上参数就可能因为传值出现一些奇奇怪怪的问题</p></li><li><p>在调用函数的时候里面的逗号只是标点符号,如果需要使用逗号运算符需要再加一层括号<code>x((a,b)</code></p></li><li><p>函数不允许嵌套定义,但是可以在函数中写另一个函数的原型</p></li><li><p><code>int main()</code>也是函数,如果你不需要main有任何参数,也可以在()中加上void</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K680e-G6D1黑苹果</title>
      <link href="/K680E-G6D1%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
      <url>/K680E-G6D1%E9%BB%91%E8%8B%B9%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>这是一个拼凑了很久才对我而言较为完美的一套配置</p><a id="more"></a><p>远景和github也有其他人分享的,但无奈的是,我都不能直接套用</p><p>故而升到<del>10.15.4</del>10.15.5后自己又拼拼凑凑</p><p>(抽了个空更新到了11)</p><p>截止0.6.2版本已趋近完美</p><p><del>后续可能会更新吧</del></p><p><del>下次更新应该是oc正式版了 ^^</del></p><p><del>想转成OC,等完善后尝试一下</del></p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-13_23:22.png" alt="11-13_23:22"></p><h2 id="完善程度"><a href="#完善程度" class="headerlink" title="完善程度"></a>完善程度</h2><table><thead><tr><th align="center">硬件</th><th align="center">型号</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">CPU</td><td align="center">i5-7400</td><td align="center">已睿频</td></tr><tr><td align="center">图形卡</td><td align="center">HD630</td><td align="center">已驱动</td></tr><tr><td align="center">图形卡2</td><td align="center">GTX 1050Ti</td><td align="center">已屏蔽</td></tr><tr><td align="center">声卡</td><td align="center">ALC269</td><td align="center">已驱动</td></tr><tr><td align="center">Wi-Fi&amp;蓝牙</td><td align="center">自带 Intel网卡</td><td align="center">已驱动</td></tr><tr><td align="center">USB</td><td align="center"></td><td align="center">内建</td></tr><tr><td align="center">睡眠</td><td align="center"></td><td align="center">正常</td></tr><tr><td align="center">FN映射</td><td align="center"></td><td align="center"><del>正常</del></td></tr><tr><td align="center">显示器</td><td align="center"></td><td align="center">Hidpi已开启</td></tr><tr><td align="center">触摸板</td><td align="center"></td><td align="center">正常</td></tr></tbody></table><h3 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h3><ul><li>睡眠状态只能开盖或用电源键唤醒<del>睡眠并不像Win那么完美</del></li><li><del>缓冲帧注入的是HD520的ID(不然我开机会黑屏)</del></li><li><del>电量不能显示插拔电源不能切换状态</del></li><li><del>亮度调节需要休眠后才正常</del></li><li><del>触摸板在设置中无法显示(功能正常)</del></li><li><del>触摸板手势不全</del></li><li>快捷键无法调节亮度</li><li>Intel网卡可能导致无法正常睡眠</li><li><del>CPU没有低频</del></li></ul><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><div class="timeline"><p class='p h2'>更新日志</p><div class="timenode"><div class="meta"><p><p>0x0</p></p></div><div class="body"><p>…</p></div></div><div class="timenode"><div class="meta"><p><p>0x1</p></p></div><div class="body"><ol><li><p>修复睡眠</p></li><li><p>更新驱动</p></li><li><p>出于好看把核显仿冒信息改成了UHD 630</p></li><li><p>添加了更多的bug…</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-16_15:28.gif" alt="06-16_15:28"></p></div></div><div class="timenode"><div class="meta"><p><p>0x2</p></p></div><div class="body"><ol><li><p>尝试修复亮度调节未果</p></li><li><p>USB修复</p></li><li><p><del>修复睡眠后时间不同步</del><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-19_00:13.jpg" alt="06-19_00:13">主板电池没电导致的</p></li></ol></div></div><div class="timenode"><div class="meta"><p><p>0x3</p></p></div><div class="body"><ol><li><p>迁移至OC 0.5.9正式版</p></li><li><p>添加CPU传感器驱动</p></li><li><p>添加原生电源管理</p></li><li><p>其他…(忘记了)</p></li><li><p>换成oc后开机快了一倍 ohhhhhh<img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-29_11:36.jpg" alt="06-29_11:36"></p></li></ol></div></div><div class="timenode"><div class="meta"><p><p>0x4</p></p></div><div class="body"><ol><li><p>oc版本更新至0.6.0 测试版</p></li><li><p>支持macOS 11 beta</p></li><li><p>换成自编译的万能触控板驱动</p></li><li><p>不知道我的设备为啥不能用ps2和rmi…</p></li><li><p>11可用的一键开启hidpi<code>bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/xzhih/one-key-hidpi/dev/hidpi.sh)&quot;</code></p></li></ol></div></div><div class="timenode"><div class="meta"><p><p>0x5</p></p></div><div class="body"><ol><li>oc版本更新至0.6.1测试版 <a href="https://github.com/williambj1/OpenCore-Factory/releases/tag/2020-08-13" target="_blank" rel="noopener">8.13</a></li><li>支持11.0 beta4</li><li>核显注入ID为<code>19160000</code></li></ol></div></div><div class="timenode"><div class="meta"><p><p>0x6</p></p></div><div class="body"><ol><li><p>oc更新至<a href="https://github.com/acidanthera/OpenCorePkg" target="_blank" rel="noopener">0.6.2正式版</a></p></li><li><p>刷入<a href="https://zhboat.lanzoui.com/i879yhn0gja" target="_blank" rel="noopener">D大的BIOS</a>解锁了CFG</p><p><strong><font color=red>解锁有风险!!!</font></strong></p><p>未解锁机器请将<code>Kernel/AppleCpuPmCfgLcok和AppleXcpmCfgLock</code>修改为True</p><p>如遇开机黑屏请将<code>ig-platform-id</code>改成<code>19160000</code></p></li><li><p>核显注入ID修改为<code>591B0000</code></p></li><li><p>修复亮度调节问题</p></li><li><p>重新定制USB</p></li><li><p>其他优化…</p></li></ol></div></div><div class="timenode"><div class="meta"><p><p>0x7</p></p></div><div class="body"><ol><li><p>oc更新至<a href="https://github.com/acidanthera/OpenCorePkg" target="_blank" rel="noopener">0.6.3正式版</a></p></li><li><p>支持最新版本BigSur 11.0.1正式版</p></li><li><p>修改仿冒机型信息为14,3</p><p>更新请先退出AppleID</p></li><li><p>更新驱动版本</p></li><li><p>优化触摸板</p></li><li><p>其他优化…</p></li></ol></div></div><div class="timenode"><div class="meta"><p><p>0x8</p></p></div><div class="body"><ol><li>oc更新至<a href="https://github.com/acidanthera/OpenCorePkg" target="_blank" rel="noopener">0.6.4正式版</a></li><li>移除三码,请自行添加,<strong>建议留空UUID</strong></li><li>更新驱动版本</li><li>修复无法启动Windows的问题<img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/12-08_12:02.gif" alt=""></li><li>添加Intel网卡支持(可能导致无法正常睡眠)</li><li>未解锁用户请使用<code>config_locked</code>引导</li></ol><p>如果遇到有线网卡无法连接网络情况请将<code>系统偏好设置/网络/以太网适配器/高级/硬件/速度&amp;双工</code>手动改成宽带速率和全双工模式</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/12-08_11:53.png" alt="12-08_11:53"></p><p>By White</p><ul><li>屏蔽独显（防止S3下独显启用导致的崩溃）</li><li><del>亮度键调节</del></li><li>去除无用驱动（I2C等）</li><li>去除无用HotPatch（PMC、SBUS等）</li><li>去除NoTouchID（Big Sur下已失效）</li><li>添加Sinetek驱动</li><li>添加屏蔽_PRW唤醒</li><li>精简无用Quirk/无用添加项</li><li>仿冒环境光传感器</li><li>添加背光修补</li><li>去除操作系统补丁</li><li>去除KASLR注入方式</li><li>将PCI下Layout ID更改为boot-args参数（便于调试）</li><li>去除无用NVRAM项</li><li>去除SMBIOS下UUID</li><li>去除USB限制解除</li><li>修复启动磁盘判断</li><li>去除KEXT崩溃信息</li><li>修复音频崩溃问题（Kaby lake）</li></ul></div></div></div><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><ul><li><p>Intel Power Gadget</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/10-22_11:39.png" alt="Intel Power Gadget"></p></li><li><p>CPU-s</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-29_11:27.png" alt="image-20200629112717541"></p></li><li><p>桌面</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/07-14_00:55.png" alt="07-14_00:55"></p></li><li><p>关于</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-13_23:25.png" alt="11-13_23:25"><br><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/07-14_00:36.png" alt="07-14_00:36"></p></li><li><p>设置</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/12-08_11:54.png" alt=""></p></li><li><p>电池</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/08-13_20:14.png" alt="电池"></p></li><li><p>Wi-Fi</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/08-13_20:17.png" alt="WiFi"></p></li><li><p>触摸板</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_00:00.png" alt="11-14_00:00"></p></li><li><p>随航</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-24_02:01.png" alt="06-24_02:01"></p></li><li><p>显示器</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_00:01.png" alt="11-14_00:01"></p></li><li><p>音量</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-24_02:06.png" alt="image-20200624020621493"></p></li><li><p>FaceTime &amp; iMessages</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-16_15:20.jpg" alt="06-16_15:20"></p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/06-16_15:24.png" alt="06-16_15:24"></p></li><li><p>音量&amp;亮度调节</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/05-21_20:32.png" alt="05-21_20:32"></p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/05-21_20:27.png" alt="05-21_20:27"></p></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>网盘:<a href="https://zhboat.lanzoui.com/b09f7sn2f" target="_blank" rel="noopener">蓝奏云</a></p><p>仓库:<a href="https://github.com/zhboat/k680e-g6d1_Hackintosh" target="_blank" rel="noopener">k680e-g6d1_Hackintosh</a></p><blockquote><p>欢迎加入QQ群一起交流讨论981553004</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/11-14_01:08.jpg" alt="11-14_01:08"></p></blockquote><hr><p>待补充…</p><blockquote><p>镜像来自黑果小兵:<a href="https://blog.daliansky.net/WeChat_First-macOS-Catalina-10.15.4-19E2269-official-version-Clover-5116-original-image-reconstruction-version.html" target="_blank" rel="noopener">https://blog.daliansky.net/WeChat_First-macOS-Catalina-10.15.4-19E2269-official-version-Clover-5116-original-image-reconstruction-version.html</a></p><p>参考:<a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&amp;tid=1831835&amp;page=1&amp;ordertype=1#pid50365897" target="_blank" rel="noopener">http://bbs.pcbeta.com/forum.php?mod=viewthread&amp;tid=1831835&amp;page=1&amp;ordertype=1#pid50365897</a></p><p>参考:<a href="https://blog.xjn819.com/?p=543" target="_blank" rel="noopener">https://blog.xjn819.com/?p=543</a></p><p>参考:<a href="https://github.com/usernameOwdxj5/OpenCore-Hasee-K670-i5-9400-W650kj1" target="_blank" rel="noopener">https://github.com/usernameOwdxj5/OpenCore-Hasee-K670-i5-9400-W650kj1</a></p><p>参考:<a href="http://bbs.pcbeta.com/viewthread-1874306-1-1.html" target="_blank" rel="noopener">http://bbs.pcbeta.com/viewthread-1874306-1-1.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 黑苹果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(5)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-5/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-5/</url>
      
        <content type="html"><![CDATA[<p>基础数据类型</p><a id="more"></a><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>C语言必须在使用变量前确定类型并定义</p><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p>C语言基础类型表</p><table><thead><tr><th align="center">C语言类型</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">整数</td><td align="center">Char</td><td align="center">Short</td><td align="center">Int</td><td align="center">Long</td><td align="center">Long  long</td></tr><tr><td align="center">浮点数</td><td align="center">Float</td><td align="center">Double</td><td align="center">Long double</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">逻辑</td><td align="center">bool</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">指针</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">自定义类型</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><blockquote><p><strong>表达数的范围:</strong> char &lt; short &lt; int &lt; float &lt; double</p><p><strong>内存占据大小:</strong> 1字节~16字节</p><p><strong>内存中的表达式:</strong> 二进制数(补码) , 编码</p></blockquote><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><table><thead><tr><th align="center">类型名称</th><th align="center">格式化</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">%d</td></tr><tr><td align="center">long</td><td align="center">%ld</td></tr><tr><td align="center">double</td><td align="center">%lf</td></tr><tr><td align="center">unsinged</td><td align="center">%u</td></tr><tr><td align="center">unsigned long long</td><td align="center">%lu</td></tr></tbody></table><p>小于int的类型:<code>char</code>,<code>short</code>,<code>int</code>才用同一种输出格式:<strong>%d</strong></p><p>大于int的类型:输出格式%ld</p><h3 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h3><p>sizeof是一个运算符,其用处是给出某个类型或变量在内存中占据的字节数</p><p>用法: sizeof(类型/变量)</p><p><strong>sizeof不会做计算</strong>,执行<code>sizeof(int+1.0)</code>会输出double类型的字节数</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><table><thead><tr><th>类型</th><th>字节数(1字节=8比特)</th></tr></thead><tbody><tr><td>char</td><td>1</td></tr><tr><td>short</td><td>2</td></tr><tr><td>int</td><td>取决于CPU</td></tr><tr><td>long</td><td>取决于CPU</td></tr><tr><td>long long</td><td>8</td></tr></tbody></table><h4 id="整数的内部表达"><a href="#整数的内部表达" class="headerlink" title="整数的内部表达"></a>整数的内部表达</h4><p>比int类型小的数据表达的是寄存器中的某些位,而比int大的表达的可能是多个寄存器拼凑起来的,但是不管怎么说,计算机内部都是二进制数</p><h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><p><em><strong>从不同角度看是不同的数值</strong></em></p><p>补码的意义就是拿补码和原码可以加出一个溢出的0</p><p>负数的补码计算方式<code>0 - a</code> </p><p>另一种方式<code>2^n -a</code>,n是这种类型的位数</p><ul><li><p>-1 + 1 = 0</p><ul><li>0 –&gt; (1)00000000</li><li>1 –&gt; 00000001</li></ul></li><li><p>(补码-1)11111111 + 00000001 = 100000000</p><p>所以-1 + 1 = 00000000</p></li><li><p>0 - 1 = -1</p><ul><li>0 –&gt; (1)00000000</li><li>1 –&gt; 00000001</li></ul></li><li><p>(1)00000000 - 00000001 = 11111111</p><p>所以 0 -1 = 补码形式的11111111</p></li></ul><h4 id="整数的范围"><a href="#整数的范围" class="headerlink" title="整数的范围"></a>整数的范围</h4><p>对于一个字节(8位),可以表达的是从<code>00000000 ~ 11111111</code></p><p>其中<code>00000000 为 0</code> </p><p><code>11111111 ~ 100000000 为  -1 ~ -128</code></p><p><code>00000001 ~ 01111111 为 1 ~ 127</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">255</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="number">255</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"i=%d,c=%d"</span>,i,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// i=255,c=-1</span></span><br></pre></td></tr></table></figure><p>由此可见,不同类型的数据的范围是不同的</p><table><thead><tr><th align="center">类型</th><th align="center">字节数</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">1字节</td><td align="center">-128 ~ 127</td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center">-32768 ~ 32767</td></tr><tr><td align="center">int</td><td align="center">取决于CPU</td><td align="center">-2^32-1 ~ 2^32-1 -1</td></tr></tbody></table><h4 id="Unsigned"><a href="#Unsigned" class="headerlink" title="Unsigned"></a>Unsigned</h4><p>主要作用是为了移位做纯二进制运算</p><p>该类型的整数不以补码形式表示负数,只有正整数和0</p><p>表达正数时会将数值扩大一倍</p><p>如果一个字面量常数想表达自己是Unsigned,可以在后面加上u或U,例如:255U</p><h4 id="整数越界"><a href="#整数越界" class="headerlink" title="整数越界"></a>整数越界</h4><p>整数是以纯二进制方式进行计算的</p><p><code>11111111 + 1</code> –&gt; <code>10000000</code> = 0</p><p><code>01111111 +1</code> –&gt; <code>10000000</code> = -128</p><p><code>10000000 -1</code>–&gt;<code>01111111</code> = 127</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>  <span class="keyword">char</span> c1 = <span class="number">255</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c+1=%d,c-1=%d\nunsingedc+1=%d,unsignedc-1=%d"</span>,c + <span class="number">1</span>,c - <span class="number">1</span>,c1 +<span class="number">1</span>, c1 <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// c+1=128,c-1=126</span></span><br><span class="line"><span class="comment">// unsinged c+1=256,unsigned c-1=254</span></span><br></pre></td></tr></table></figure><h4 id="选择整数类型"><a href="#选择整数类型" class="headerlink" title="选择整数类型"></a>选择整数类型</h4><ul><li>整数之所以有这么多种是为了更准确得表达内存,做底层程序的需要</li><li>没有特殊的需求情况下选择int类型就好</li><li>Unsigned与否只是输出的不同,但在内部计算仍然是一样的</li></ul><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><p>计算机只认识2进制,其他进制的数据都会被转换成2进制</p><p>其他进制只是如何把数字表达成字符串,但与内部如何表达数字没有关系</p><ul><li>以<code>0</code>开头的数字字面量是8进制</li><li>以<code>0x</code>开头的数字字面量是16进制</li><li>%o用于将8进制输出10进制,%x/X用于将16进制输出10进制</li><li>16进制更适合表达2进制数据,因为4位二进制正好是一个16进制位</li></ul><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><table><thead><tr><th align="center">类型</th><th align="center">字长</th><th>范围</th><th align="center">有效数字</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">32</td><td>±(1.20×10^-38 ~ 3.40×10^38),0,±inf(无穷大),nan(非数字)</td><td align="center">7</td></tr><tr><td align="center">double</td><td align="center">64</td><td>±(2.2×10^-308 ~ 1.79×10^308),0,±inf(无穷大),nan(非数字)</td><td align="center">15</td></tr></tbody></table><h4 id="输入输出-1"><a href="#输入输出-1" class="headerlink" title="输入输出"></a>输入输出</h4><p>初始化float类型的变量时,需要在其后面指定f或F后缀来表明是float类型,否则按double来表达</p><table><thead><tr><th>类型</th><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>float</td><td>%f</td><td>%f,%e/%E(科学计数法)</td></tr><tr><td>double</td><td>%lf</td><td>%f,%e/%E(科学计数法)</td></tr></tbody></table><h4 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h4><p><strong><em>浮点数的运算没有精度可言</em></strong></p><p>在%和f之间加上<code>.n</code>可以指定输出小数点后n位,这样的输出结果是做4舍5入(向下取整)的</p><h4 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h4><p>当0.0作为除数时,其结果就是无限大,而整数类型的0作为除数时无法编译</p><ul><li>printf输出inf 表示超过范围的浮点数:±∞无穷大</li><li>printf输出nan 表示不存在的浮点数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, <span class="number">1.0</span> / <span class="number">0.0</span>); <span class="comment">// inf</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, <span class="number">-1.0</span> / <span class="number">0.0</span>); <span class="comment">// -inf</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, <span class="number">0.0</span> / <span class="number">0.0</span>); <span class="comment">// nan</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择浮点类型"><a href="#选择浮点类型" class="headerlink" title="选择浮点类型"></a>选择浮点类型</h4><p>同整数类型一样,选择相对来说范围较大的一个即可</p><p>在没有特殊需求的情况下,选择使用double就好</p><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><p>之前说过Char是一种整数,但它也是一种特殊的类型:<strong>字符</strong></p><ul><li>用单引号表示的字符字面量:<code>&#39;x&#39;</code>,<code>1</code></li><li><code>&#39;&#39;</code>也是一个字符</li><li>printf和scanf里用%c来输入和输出字符类型</li></ul><p>字符的编码才用<code>ASCII码</code>当输入的是整数类型,输出格式是字符格式时,会对应<code>ASCII码</code></p><p>同一个输入内容,当输出格式不同时会各自表述</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> i = <span class="string">'1'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i); <span class="comment">// 49</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,i); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="混合输入"><a href="#混合输入" class="headerlink" title="混合输入"></a>混合输入</h4><p>当scanf里以空格分割时,输入也需要带上空格</p><p>而没有使用空格的情况下,整数后的任意输入都会被记录在后面的char类型里,包括换行符号</p><h4 id="字符计算"><a href="#字符计算" class="headerlink" title="字符计算"></a>字符计算</h4><p>字符也可以做整数的运算,当然输出的也得是字符类型</p><ul><li><p>一个字符加一个数字得到<code>ASCII</code>表中那个数之后的字符</p></li><li><p>两个字符相减,则得到它们在<code>ASCII</code>表中的距离</p></li><li><p>例如 </p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line">c++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, c); <span class="comment">// B</span></span><br></pre></td></tr></table></figure><h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><ul><li>字母在<code>ASCII</code>表中的排列是顺序的</li><li>大写字母和小写字母是分开排列的,并不能在一起</li><li>a~A 可以得到两段之间的距离,于是:<ul><li><code>a + &#39;a&#39; - &#39;A&#39;</code>可以把一个大写字母变成小写字母</li><li><code>a + &#39;A&#39;- &#39;a&#39;</code>则可以把一个小写字母变成大写字母</li></ul></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>当运算符两边出现不一致的类型时,会自动转换成能表达范围更大的类型</p><ul><li><p>char –&gt; short –&gt; int –&gt; long –&gt; long long</p></li><li><p>int –&gt; float –&gt; double</p></li><li><p>对于printf来说,任何小于int的类型都会被转换成int,float会被转换成double</p></li><li><p>但对于scanf来说,得明确类型大小,要输入short时,需要%hd</p></li></ul><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>当需要把一个量强制转换成另一个较小范围的类型</p><ul><li><p>格式(类型)值<code>(int)2.0</code></p></li><li><p>但是小的变量类型不能表达大的值;因为整数越界,所以<code>(short)32768  --&gt; -32768</code></p></li><li><p>强制类型转换只是从变量计算出一个新的类型的值,不会改变变量,无论是值还是类型都不会被改变</p></li></ul><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><p>强制类型转换的优先级高于四则运算</p><h3 id="逻辑类型"><a href="#逻辑类型" class="headerlink" title="逻辑类型"></a>逻辑类型</h3><h4 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h4><p>bool类型作为非原生类型,需要在头文件加上<code>#include &lt;stdbool.sh&gt;</code>才能使用<code>bool</code>,<code>true</code>,<code>false</code></p><p>真正意义上并没有所谓bool类型,它们仍然是整数</p><p>所以输出的时候也只能是输出整数类型的bool</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdbool.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> b = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, b); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><p>逻辑运算是对逻辑量进行的运算,结果只有0或1</p><p>而逻辑量是关系运算或逻辑运算的结果</p><ul><li><strong><em>不要将赋值,包括复合赋值组合进表达式!</em></strong></li><li>逻辑运算是自左向右进行的,如果左边的结果已经能够决定结果,就不会再做右边的计算了</li></ul><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">示例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">!</td><td align="center">逻辑非</td><td align="center">!x</td><td align="center">如果x是true则结果为false,反之如果x是false则结果为true</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">逻辑与</td><td align="center">x &amp;&amp; y</td><td align="center">如果x和y都是true,结果就是true,否则任一为false其结果就是false</td></tr><tr><td align="center">||</td><td align="center">逻辑或</td><td align="center">x || y</td><td align="center">如果x和y有一个是true,结果就是true,只有两者都是false时,结果才是false</td></tr></tbody></table><h5 id="e-g"><a href="#e-g" class="headerlink" title="e.g"></a>e.g</h5><p><code>x ∈(2,5)</code> –&gt; <code>x &gt; 2 &amp;&amp; x &lt; 5</code></p><p><code>x ∈[3,5]</code> –&gt; <code>x &gt;= 3 &amp;&amp; x &lt;= 5</code></p><p>判断大写字母</p><p><code>x = &#39;A&#39; &amp;&amp; x &lt;= &#39;Z&#39;</code></p><p>判断小写字母</p><p><code>x = &#39;a&#39; &amp;&amp; x &lt;= &#39;z&#39;</code></p><h5 id="优先级-1"><a href="#优先级-1" class="headerlink" title="优先级"></a>优先级</h5><p>这三个逻辑运算的优先级是<code>! &gt; &amp;&amp; &gt; ||</code></p><p>而且<code>||</code>和<code>&amp;&amp;</code>是自左向右运算的</p><p><code>!error &amp;&amp; finish || done</code>当error不为0并且finish 或 done有一个为true,那么结果就为true,否则为false</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdbool.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> error = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> flish = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">bool</span> done = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,!error &amp;&amp; flish || done); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>优先级</th><th align="center">运算符</th><th align="center">结合性</th></tr></thead><tbody><tr><td>1</td><td align="center">()</td><td align="center">从左到右</td></tr><tr><td>2</td><td align="center">! + - ++ –</td><td align="center">从右到左(单目的+和-)</td></tr><tr><td>3</td><td align="center">* / %</td><td align="center">从左到右</td></tr><tr><td>4</td><td align="center">+ -</td><td align="center">从左到右</td></tr><tr><td>5</td><td align="center">&lt; &lt;= &gt; &gt;=</td><td align="center">从左到右</td></tr><tr><td>6</td><td align="center">== !=</td><td align="center">从左到右</td></tr><tr><td>7</td><td align="center">&amp;&amp;</td><td align="center">从左到右</td></tr><tr><td>8</td><td align="center">||</td><td align="center">从左到右</td></tr><tr><td>9</td><td align="center">= += -= *= /= %=</td><td align="center">从右到左</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="条件运算符-三目运算符"><a href="#条件运算符-三目运算符" class="headerlink" title="条件运算符(三目运算符)"></a>条件运算符(三目运算符)</h3><p>它的作用和if是一样的,这是编程语言早期遗留下的东西,和if一样可以嵌套使用,不过写法和易懂性很差</p><ul><li><p>条件运算符的优先级高于赋值运算符,但是低于其他的运算符</p></li><li><p>条件运算符是自右向左结合的</p></li><li><p>格式:<code>x = y * 5 &gt; 10 ? 3 : 2</code>其中?前面是条件,?后面是条件满足时的值,:后面是条件不满足时的值,如果把它写成if语句就是:</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( y * <span class="number">5</span> &gt; <span class="number">10</span> )&#123;</span><br><span class="line">x = <span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逃逸字符-转义字符"><a href="#逃逸字符-转义字符" class="headerlink" title="逃逸字符(转义字符)"></a>逃逸字符(转义字符)</h3><p>其作用是为了表达无法输出的控制字符或特殊字符,使用反斜杠<code>\</code>开头,后面跟上需要逃逸(转义)的字符,这两个字符合起来,组成了一个可以正常输出的字符</p><table><thead><tr><th>字符</th><th>别名</th><th>作用</th></tr></thead><tbody><tr><td>\a</td><td>响铃符</td><td>触发蜂鸣器</td></tr><tr><td>\b</td><td>回车</td><td>回退一格</td></tr><tr><td>\t</td><td>table</td><td>到下一个表格位</td></tr><tr><td>\n</td><td>回车换行</td><td>换行</td></tr><tr><td><del>\r</del></td><td><del>回车</del></td><td><del>回车</del></td></tr><tr><td>\“</td><td>双引号</td><td>将”变成普通字符</td></tr><tr><td>\‘</td><td>单引号</td><td>将’变成普通字符</td></tr><tr><td>\\</td><td>反斜杠</td><td>输出反斜杠本身</td></tr></tbody></table><h4 id="b"><a href="#b" class="headerlink" title="\b"></a>\b</h4><p>回退的含义并不是删除前一位字符,而是将\b后一位字符补进前一位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"123\bA"</span>); <span class="comment">// 12A</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="t"><a href="#t" class="headerlink" title="\t"></a>\t</h4><p>table是每行固定的四个空格,只要输出的字符占据table以内的字符都是按照对齐的方式排列的</p><ul><li>一个\t可以使得输出从下一个制表位开始</li><li>用\t才能使得上下两行对齐</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="类型字节数与范围"><a href="#类型字节数与范围" class="headerlink" title="类型字节数与范围"></a>类型字节数与范围</h3><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th></tr></thead><tbody><tr><td>char</td><td>1 字节</td><td>-128 到 127 或 0 到 255</td></tr><tr><td>unsigned char</td><td>1 字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1 字节</td><td>-128 到 127</td></tr><tr><td>int</td><td>2 或 4 字节</td><td>-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned int</td><td>2 或 4 字节</td><td>0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td>short</td><td>2 字节</td><td>-32,768 到 32,767</td></tr><tr><td>unsigned short</td><td>2 字节</td><td>0 到 65,535</td></tr><tr><td>long</td><td>4 字节</td><td>-2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned long</td><td>4 字节</td><td>0 到 4,294,967,295</td></tr><tr><td>float</td><td>4 或8 字节</td><td>1.2E-38 到 3.4E+38</td></tr><tr><td>double</td><td>8 字节</td><td>2.3E-308 到 1.7E+308</td></tr><tr><td>long int</td><td>4 或 8字节</td><td></td></tr><tr><td>long long</td><td>8字节</td><td></td></tr><tr><td>long double</td><td>8 或 12 或 16字节</td><td>3.4E-4932 到 1.1E+4932</td></tr></tbody></table><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><table><thead><tr><th align="left">类别</th><th align="left">运算符</th><th align="left">结合性</th></tr></thead><tbody><tr><td align="left">后缀</td><td align="left">() [] -&gt; .</td><td align="left">从左到右</td></tr><tr><td align="left">一元</td><td align="left">+ - ! ~ ++ - - (类型) * &amp; sizeof</td><td align="left">从右到左</td></tr><tr><td align="left">乘除</td><td align="left">* / %</td><td align="left">从左到右</td></tr><tr><td align="left">加减</td><td align="left">+ -</td><td align="left">从左到右</td></tr><tr><td align="left">移位</td><td align="left">&lt;&lt; &gt;&gt;</td><td align="left">从左到右</td></tr><tr><td align="left">关系</td><td align="left">&lt; &lt;= &gt; &gt;=</td><td align="left">从左到右</td></tr><tr><td align="left">相等</td><td align="left">== !=</td><td align="left">从左到右</td></tr><tr><td align="left">位与 AND</td><td align="left">&amp;</td><td align="left">从左到右</td></tr><tr><td align="left">位异或 XOR</td><td align="left">^</td><td align="left">从左到右</td></tr><tr><td align="left">位或 OR</td><td align="left">|</td><td align="left">从左到右</td></tr><tr><td align="left">逻辑与 AND</td><td align="left">&amp;&amp;</td><td align="left">从左到右</td></tr><tr><td align="left">逻辑或 OR</td><td align="left">||</td><td align="left">从左到右</td></tr><tr><td align="left">条件</td><td align="left">?:</td><td align="left">从右到左</td></tr><tr><td align="left">赋值</td><td align="left">= += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^= |=</td><td align="left">从右到左</td></tr><tr><td align="left">逗号</td><td align="left">,</td><td align="left">从左到右</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(4)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-4/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-4/</url>
      
        <content type="html"><![CDATA[<p>for循环</p><a id="more"></a><p>for格式除了看上去很像while,更像是进阶版的while循环</p><p>说是功能等价while循环,倒不如说for循环是计数循环,当你设定一个计数器,初始化数值,在数值到达你设定的某个值之前,不断循环执行循环体内的表达式,而每循环一轮,计数器数值都会按你的设定进行调整</br></p><p>通俗易懂一点就是:<strong>对于一开始的初始化条件,每当循环条件成立时,重复循环体内的语句,每轮执行完循环体后,执行每轮的动作,调整计数器的数值</strong></br></p><p>当掌握这三种循环语句后,如何选择它们倒是成了个问题</p><ul><li>如果有固定次数,使用for</li><li>如果必须执行一次用do_while</li><li>其他情况才用while</li></ul><h2 id="for循环格式"><a href="#for循环格式" class="headerlink" title="for循环格式"></a>for循环格式</h2><p>每个表达式都是可以省略的</p><p><code>for ( ;循环条件; ) == while ( 循环条件 )</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( 初始化条件; 循环条件; 每轮的动作 )&#123;</span><br><span class="line">循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ol><li><p>阶乘</p><p>所谓阶乘就是<code>n!</code>,其结果是<code>1*2*3*4*5*...*n</code></p><p>使用代码实现这一过程,让用户输入n的值,然后计算出n!的结果</p><p><strong><em>(需要注意的是,在做求和的程序时,初始化变量为0,而在做求积的变量时,初始化变量应该为1)</em></strong></p><p>首先使用while来实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义变量n，i，fact</span></span><br><span class="line"><span class="comment"> * n的值是用户自行输入的</span></span><br><span class="line"><span class="comment"> * i不断的从1递增到n</span></span><br><span class="line"><span class="comment"> * fact保存计算结果</span></span><br><span class="line"><span class="comment"> * 当i小于或等于用户输入值n后结束循环</span></span><br><span class="line"><span class="comment"> * 循环体内fact的值就是1*2*3*...*n的算法</span></span><br><span class="line"><span class="comment"> * 每循环一次i++*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> fact = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> ( i &lt;= n )&#123;</span><br><span class="line">        fact *= i;</span><br><span class="line">        i ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d!=%d"</span>, n, fact);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们改成for循环</p><p>循环控制变量i只在for循环表达式中被使用,所以能将定义变量i写在for循环中,但要注意的是,在初始化条件处定义变量只有C99才能使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义变量n，fact</span></span><br><span class="line"><span class="comment"> * n的值是用户自行输入的</span></span><br><span class="line"><span class="comment"> * fact保存计算结果</span></span><br><span class="line"><span class="comment"> * 定义变量i并初始化</span></span><br><span class="line"><span class="comment"> * 当i小于或等于n时进入循环体</span></span><br><span class="line"><span class="comment"> * 每进行一轮循环让i++</span></span><br><span class="line"><span class="comment"> * 直到循环条件不满足i小于或等于n*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> fact = <span class="number">1</span> ;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++ ) &#123;</span><br><span class="line">        fact *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d!=%d"</span>, n, fact);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换个思路想,如果从n乘到1还能实现该功能吗?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一：</span></span><br><span class="line"><span class="comment"> * 定义变量n，i，fact</span></span><br><span class="line"><span class="comment"> * n的值是用户自行输入的</span></span><br><span class="line"><span class="comment"> * i的值保存用户输入的n</span></span><br><span class="line"><span class="comment"> * fact保存计算结果</span></span><br><span class="line"><span class="comment"> * 循环体内fact的值就是n*n-1...的算法</span></span><br><span class="line"><span class="comment"> * 每循环一次n--</span></span><br><span class="line"><span class="comment"> * 当n的值小于或等于1就结束循环*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> fact = <span class="number">1</span> ;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> i = n;</span><br><span class="line">    <span class="keyword">for</span> ( ;  n &gt; <span class="number">1</span>; n--) &#123;</span><br><span class="line">        fact *= n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d!=%d"</span>, i, fact);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>素数</p><ul><li>当用户输入一个数时,判断其是否为素数</li></ul></li></ol><ul><li><p>仅输出1到100范围内的前20个素数</p><p> 所谓素数即只能被1或自己整除的数,例如<code>2,3,5,7,11,13,17,19...</code></p><p> 1在狭义的范围中不算是素数,所以在此不列举1为素数</p><p> break的作用是跳出整个循环,另一个其他的用法是continue,但是它的意义只是跳过后续的循环体,回到for循环开头</p><p> ||意为或者,用于多个条件判断时,只要满足其一即true,任一条件不满足即false</p><p> &amp;&amp;意为且,用于多个条件判断时,当所有条件同时满足时即true,否则false</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义用户输入变量x</span></span><br><span class="line"><span class="comment"> * 定义判断条件变量isPrime</span></span><br><span class="line"><span class="comment"> * 定义并初始化i的值为2</span></span><br><span class="line"><span class="comment"> * 当i的值小于用户输入x时进行循环判断</span></span><br><span class="line"><span class="comment"> * 每当循环结束就让i的值自增</span></span><br><span class="line"><span class="comment"> * i &lt; x 可以理解成i的值永远都是x - 1</span></span><br><span class="line"><span class="comment"> * 如果x余i的值为0的话就将isPrime的值变成0</span></span><br><span class="line"><span class="comment"> * 并跳出整个循环</span></span><br><span class="line"><span class="comment"> * 判断isPrime的值是1还是0</span></span><br><span class="line"><span class="comment"> * 如果为0或者x为1，就输出不是素数</span></span><br><span class="line"><span class="comment"> * 否则输出是素数*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> isPrime = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; x; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            isPrime = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isPrime == <span class="number">0</span> || x == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d不是素数"</span>, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d是素数"</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n在100以内的前50个素数有:\n"</span>);</span><br><span class="line">    secondary();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义变量x，使用循环实现x的值是从1到100</span></span><br><span class="line"><span class="comment"> * 定义变量time，限制time为20</span></span><br><span class="line"><span class="comment"> * 定义变量isPrime，用于记录是否为素数</span></span><br><span class="line"><span class="comment"> * 定义变量i，用于判断是否为素数</span></span><br><span class="line"><span class="comment"> * 初始化x的值为1，初始化计数器time为0</span></span><br><span class="line"><span class="comment"> * 在1到100中当计数器小于20时，执行循环体内的语句</span></span><br><span class="line"><span class="comment"> * 每当有一个素数产生时，让计数器的数+1</span></span><br><span class="line"><span class="comment"> * 每五个素数换行显示，并让所有数都对齐*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secondary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>, time = <span class="number">0</span>; x &lt;= <span class="number">100</span> &amp;&amp; time &lt; <span class="number">20</span>; x++) &#123;</span><br><span class="line">        <span class="keyword">int</span> isPrime = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; x; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                isPrime = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isPrime == <span class="number">1</span> &amp;&amp; x != <span class="number">1</span>) &#123;</span><br><span class="line">            time++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, x);</span><br><span class="line">            <span class="keyword">if</span> (time % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>枚举硬币</p><p>用1角,2角,五角的硬币凑出10元以下的金额</p><p>我看到这题愣了半天没想明白应该怎么实现,无奈看完整个视频才缕清思路</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/04-22_00:30.png" alt="04-22_00:30"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 变量x为用户输入值</span></span><br><span class="line"><span class="comment"> * one为一角，two为二角，five为五角</span></span><br><span class="line"><span class="comment"> * one至多循环x*10-1次，two至多循环x*10\2-1次，five至多循环x*10/5-1次</span></span><br><span class="line"><span class="comment"> * 当循环的过程中，满足了one+two*2+five*5等于x*10</span></span><br><span class="line"><span class="comment"> * 就输出结果，否则就继续循环</span></span><br><span class="line"><span class="comment"> * goto可以指定跳转到任意处*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> one = <span class="number">1</span>; one &lt; x * <span class="number">10</span>; one++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> two = <span class="number">1</span>; two &lt; x * <span class="number">10</span> / <span class="number">2</span>; two++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> five = <span class="number">1</span>; five &lt; x * <span class="number">10</span> / <span class="number">5</span>; five++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (one + two * <span class="number">2</span> + five * <span class="number">5</span> == x * <span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d个1角加%d个2角加%d个5角可以得到%d元"</span>, one, two, five, x);</span><br><span class="line">                    <span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>f(n)</p><p>f(n) = 1+1/2+1/3+1/4+…+1/n</p><p>计算出1/1~1/n所有数的和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义整型变量n，用户输入值</span></span><br><span class="line"><span class="comment"> * 定义浮点变量sum。求和记录数</span></span><br><span class="line"><span class="comment"> * 定义整型变量x，循环计数器</span></span><br><span class="line"><span class="comment"> * 当x小于等于用户输入数时，x的值从1开始</span></span><br><span class="line"><span class="comment"> * sum的值等于sum加上1/x</span></span><br><span class="line"><span class="comment"> * 每轮循环结束x的值都会加1*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n ; x++) &#123;</span><br><span class="line">        sum += <span class="number">1.0</span> / x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"f(%d)=%f"</span>, n, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果f(n)=1-1/2+1/3-1/4+1/5…+1/n呢?</p><p>实现方式也很简单的,只需要定义一个浮点类型的变量,初始值等于1,当每次循环结束前,将这个浮点类型的变量变成负数,修改分母为这个变量即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> z = <span class="number">1.0</span>;</span><br><span class="line">sum += z / x;</span><br><span class="line">z = -z;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(3)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-3/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-3/</url>
      
        <content type="html"><![CDATA[<p>程序代码记录(习题)</p><a id="more"></a><h2 id="猜数游戏"><a href="#猜数游戏" class="headerlink" title="猜数游戏"></a>猜数游戏</h2><ul><li><p>让计算机来存储一个数,然后让用户来猜,每当用户输入一个数,计算机就输出该数大于或小于用户输入的数,直到用户猜中为止,最后还要输出用户一共猜了多少次</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><ol><li><p>随机数</p><p>添加一个整型变量,它的值为随机数</p><p> x % n 的结果是[0,n-1]的整数</p></li><li><p>用户输入数</p><p>用户输入的值需要写在循环体内</p></li><li><p>计数器</p><p>计数器需要写在判断前,无论是否做出判断,只要用户做出了”猜”的动作,就让计数器++</p></li><li><p>判断</p><p>循环体中需要写一段判断条件:</p><p>用户输入的数大于指定数值时,输出”大于该数”</p><p>而当用户输入的数小于指定数值时,输出”小于该数”</p></li><li><p>结束条件</p><p>只有当条件成立时,才会结束循环</p><p><strong><em>不要按照人的思维来理解循环条件</em></strong> (?)</p><p>并输出变量值</p></li></ol><h4 id="思路实现"><a href="#思路实现" class="headerlink" title="思路实现:"></a>思路实现:</h4><p>如果需要用到随机数需要引用两个库<code>stdlib.h</code>和<code>time.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">random</span> = rand() %<span class="number">100</span> +<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>只需要取100以内的数,随机数 % 100 为 0-99,+1的操作让其为100以内</p><p>用户的猜数操作需要写在循环体中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> input;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br></pre></td></tr></table></figure><p>定义一个计数器,让它用户输入数值后++,以满足每次”猜数”的操作能记录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">time++;</span><br></pre></td></tr></table></figure><p> 用户输入的数大于指定数值时,输出”大于该数”</p><p> 而当用户输入的数小于指定数值时,输出”小于该数”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( input &gt; <span class="built_in">random</span> )&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"您输入的数大于随机数"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( input &lt; <span class="built_in">random</span> )&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"您输入的数小于随机数"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结束的条件是当用户输入数等于随机数才跳出循环,在代码中的实现却得写成这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( input != <span class="built_in">random</span> );</span><br></pre></td></tr></table></figure><p>当输入值不等于随机数时继续循环,只有输入值等于随机数才会结束循环</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义一个随机数</span></span><br><span class="line"><span class="comment"> * 定义一个计数器</span></span><br><span class="line"><span class="comment"> * 定义一个用户输入值</span></span><br><span class="line"><span class="comment"> * 无论是否做出判断都会执行一次输入值的动作，所以使用do while</span></span><br><span class="line"><span class="comment"> * 将用户输入值的操作写在循环体中，而后让计数器++</span></span><br><span class="line"><span class="comment"> * 判断输入值是否大于或等于随机数</span></span><br><span class="line"><span class="comment"> * 不满足条件时结束循环*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"time.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">random</span>  = rand() %<span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> input;</span><br><span class="line">    <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line">        time++;</span><br><span class="line">        <span class="keyword">if</span> ( input &gt; <span class="built_in">random</span> )&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"您输入的数大于随机数"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( input &lt; <span class="built_in">random</span> )&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"您输入的数小于随机数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span> ( input != <span class="built_in">random</span> );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"您猜中了！您一共猜了%d次"</span>, time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="算平均数"><a href="#算平均数" class="headerlink" title="算平均数"></a>算平均数</h2><ul><li><p>让用户输入一系列正整数,当用户输入-1时结束输入,然后程序计算出这些数字的平均数,输出用户输入数字的个数与平均数</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路:"></a>思路:</h3><ol><li><p>用户输入数</p><p>除了需要用户输入外,还需要定义一个存储这些数的变量</p></li><li><p>计数器</p><p>每当用户输入数字之后就进行++的操作</p><p>但当用户输入结束指令时也会被记录,所以要在循环体外让计数器-1</p></li><li><p>结束</p><p>不满足条件时结束循环</p></li></ol><h4 id="思路实现-1"><a href="#思路实现-1" class="headerlink" title="思路实现:"></a>思路实现:</h4><ol><li><p>循环条件</p><p>满足循环的条件是当用户输入的值不为-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while ( input !&#x3D; -1)</span><br></pre></td></tr></table></figure></li><li><p>用户输入数</p><p>用户输入的值需要写在循环体内</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> input;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br></pre></td></tr></table></figure></li><li><p>计数器</p><p>计数器需要写在用户输入后面,每当用户输入后都进行++的操作</p><p>但是在结束循环体后要让计数器-1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">time ++;</span><br><span class="line">time -= <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>存储数值</p><p>计算平均数需要让用户输入的所有数相加并除以输入次数,所以存储变量需要每次都在原有基础上加上用户新输入的数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">sum += input;</span><br></pre></td></tr></table></figure></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义input time sum 变量</span></span><br><span class="line"><span class="comment"> * 分别对应用户输入值，计数器，和用户输入值总和</span></span><br><span class="line"><span class="comment"> * 当用户输入的值不为-1时进入循环</span></span><br><span class="line"><span class="comment"> * sum的值为input+sum</span></span><br><span class="line"><span class="comment"> * 每次用户输完数后计数器都会++，即使是-1</span></span><br><span class="line"><span class="comment"> * 所以要在结束循环后让计数器-1，让其变成正常的</span></span><br><span class="line"><span class="comment"> * 最后输出计数器和平均值*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> input , time , sum;</span><br><span class="line">    time = <span class="number">0</span>;</span><br><span class="line">    input = <span class="number">0</span>;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( input != <span class="number">-1</span>)&#123;</span><br><span class="line">        sum += input;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line">        time++;</span><br><span class="line">    &#125;</span><br><span class="line">    time -= <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    另一种实现方式</span></span><br><span class="line"><span class="comment">//    scanf("%d", &amp;input);</span></span><br><span class="line"><span class="comment">//    while ( input != -1)&#123;</span></span><br><span class="line"><span class="comment">//        time++;</span></span><br><span class="line"><span class="comment">//        sum += input;</span></span><br><span class="line"><span class="comment">//        scanf("%d", &amp;input);</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"您一共输入了%d次，最后的平均数是：%d"</span>, time , sum / time);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="整数逆序"><a href="#整数逆序" class="headerlink" title="整数逆序"></a>整数逆序</h2><ul><li><p>当用户输入任意数字后,计算机需要输出其对应的倒序</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路:"></a>思路:</h3><ol><li><p>对整数做%10的操作就能得到个位数</p></li><li><p>对整数做/10的操作就能去掉个位数</p></li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义变量x和digit</span></span><br><span class="line"><span class="comment"> * 当用户输入x的值后进入while</span></span><br><span class="line"><span class="comment"> * 首先会判断x是否大于0，满足则进入循环体</span></span><br><span class="line"><span class="comment"> * digit的值是用户输入的最后一位</span></span><br><span class="line"><span class="comment"> * 然后将去掉的那一位数去掉，重新循环</span></span><br><span class="line"><span class="comment"> * 知道x的值不满足大于0的条件才会结束循环*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x , digit;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">while</span> ( x &gt;  <span class="number">0</span>)&#123;</span><br><span class="line">        digit = x % <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, digit);</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="整数分解"><a href="#整数分解" class="headerlink" title="整数分解"></a>整数分解</h2><ul><li><p>输入一个非负整数,正序输出它每一位数字,并在其后面加空格</p><p>输入:12345</p><p>输出:1  2  3  4  5</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路:"></a>思路:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(input)12345 &#x2F; (mask)10000 &#x3D; (result)1</span><br><span class="line">(input)12345 % (mask)10000 &#x3D; 2345</span><br><span class="line">(mask)10000 &#x2F; 10    &#x3D; (mask)1000</span><br><span class="line"></span><br><span class="line">(input)2345 &#x2F; (mask)1000 &#x3D; (result)2</span><br><span class="line">(input)2345 % (mask)1000 &#x3D; 345</span><br><span class="line">(mask)1000 &#x2F; 10    &#x3D; (mask)100</span><br><span class="line"></span><br><span class="line">...如此循环,直至mask&#x3D;0</span><br></pre></td></tr></table></figure><ol><li><p>取位数(mask)</p><p>之前写过取位数的相关代码,但是仅仅只是取位数而已,这里我们需要每取一位就让input除等以10,mask乘等以10,直到input被除到小于等于10为止</p></li><li><p>算法实现</p><p>得知mask的值之后就好办了,根据上述算法就可以写出代码了</p><p>判断,当mask大于1就输出一个空格</p></li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> inp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;inp);</span><br><span class="line">    <span class="keyword">int</span> inp2 = inp;</span><br><span class="line">    <span class="keyword">int</span> mask = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    取位数</span></span><br><span class="line">    <span class="keyword">while</span> ( inp &gt; <span class="number">9</span> )&#123;</span><br><span class="line">        inp /= <span class="number">10</span>;</span><br><span class="line">        mask *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mask=%d\n"</span>, mask);</span><br><span class="line"><span class="comment">//    算法</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> res = inp2 / mask;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, res);</span><br><span class="line">        <span class="keyword">if</span> ( mask &gt; <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        inp2 %= mask;</span><br><span class="line">        mask /= <span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span> ( mask &gt; <span class="number">0</span> );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><ul><li><p>输入两个数a和b,输出它们的最大公约数</p><p>例如:输出12 和18</p><p>输出6</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路:"></a>思路:</h3><ol><li><p>如果b等于0,结束计算,a就是最大公约数;</p></li><li><p>计算a除b的余数,让a等于b,而b等于那个余数</p></li></ol><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = t;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%d%d\n"</span>,a,b,t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"gcd=%d"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="给定条件整数集"><a href="#给定条件整数集" class="headerlink" title="给定条件整数集"></a>给定条件整数集</h2><ul><li><p>给定一个不超过6的正整数A,从A开始的连续4个数字算进整数集中,请输出由整数集中的所有无重复数字组成的3位数</p></li><li><p>要求输出的3位数从大到小排列,每行只存在6个整数,每个整数之间用空格分开,但是航模不允许有多余的空格</p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路:"></a>思路:</h3><ol><li><p>嵌套的三个循环,每个数对应一个变量</p></li><li><p>输出条件,当三个数字不相同的时候才输出结果</p></li><li><p>换行条件,满足循环6的次数,满足则换行,否则输出空格</p></li></ol><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义五个变量</span></span><br><span class="line"><span class="comment"> * a是用户输入值</span></span><br><span class="line"><span class="comment"> * i，j，k分别对应整数集中的三位数</span></span><br><span class="line"><span class="comment"> * time是计数器，每轮输出判断中让计数器++</span></span><br><span class="line"><span class="comment"> * 循环条件把用户输入的值赋给i，j，k，当它们小于等于3时才进入循环每轮循环让它们+1</span></span><br><span class="line"><span class="comment"> * 只有当i，j，k三个数互不相等时才满足输出判断</span></span><br><span class="line"><span class="comment"> * 如果计数器到达6次时，输出一个换行，并让计数器归零</span></span><br><span class="line"><span class="comment"> * 否则的话只输出空格符</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, i, j, k, time = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="comment">//  嵌套循环</span></span><br><span class="line">    <span class="keyword">for</span> (i = a; i &lt; a + <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = a; j &lt; a + <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = a; k &lt; a + <span class="number">4</span>; k++) &#123;</span><br><span class="line"><span class="comment">//              输出判断</span></span><br><span class="line">                <span class="keyword">if</span> (i != k &amp;&amp; i != j &amp;&amp; j != k) &#123;</span><br><span class="line">                    time++;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d%d%d"</span>, i, j, k);</span><br><span class="line"><span class="comment">//                  换行判断</span></span><br><span class="line">                    <span class="keyword">if</span> (time == <span class="number">6</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                        time = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="水仙花数"><a href="#水仙花数" class="headerlink" title="水仙花数"></a>水仙花数</h2><ul><li><p>水仙花数是指一个N位的正整数(N&gt;=3),它的每个位上的数字N次幂之和等于它本身的,计算出所有N位的水仙花数</p><p>例如:153=1^3+5^3+3^3,输入3,输出153,370,371</p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路:"></a>思路:</h3><ol><li><p>先利用循环得出N位数的最小数,例如n为3,则最小数为100</p></li><li><p>其次一个大循环,范围是最小数到最大数(最小数*10)</p></li><li><p>将所有数都拆分开计算,每个数都乘n次自身,使用sum储存它们的和</p></li><li><p>判断,当sum与大循环的条件相等时,就为水仙花数</p></li></ol><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//水仙花数是指一个N位的正整数（ N&gt;=3 ），它的每个位上的数字的N次幂之和等于它本身,计算出所有N位水仙花数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, first = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span> || n &gt; <span class="number">7</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"您输入的数有误,请重新输入"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            first *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//k = first~first*10</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = first; k &lt; first * <span class="number">10</span>; ++k) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p = k; p &gt; <span class="number">0</span>;) &#123;</span><br><span class="line">                <span class="keyword">int</span> o = <span class="number">0</span>;</span><br><span class="line">                o = p % <span class="number">10</span>; <span class="comment">// o = 100 ~ 999 % 10</span></span><br><span class="line">                <span class="keyword">int</span> res = o;</span><br><span class="line">                p /= <span class="number">10</span>; <span class="comment">// first~first*10/10</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123; <span class="comment">//循环两次</span></span><br><span class="line">                    res *= o;<span class="comment">// res * res * res</span></span><br><span class="line">                &#125;</span><br><span class="line">                sum += res; <span class="comment">//sum = sum + res * res * res</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k == sum) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h2><ul><li><p>完整口诀表</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/05-11_19:00.png" alt="05-11_19:00"></p></li><li><p>对任意给定的1位正整数N,输出从1<em>1到n\</em>n的下三角部分口诀表,结果后面需要占四位空格,左对齐显示</p><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路:"></a>思路:</h3><ol><li><p>两个循环,第一个范围从1到输入的正整数N,每循环一轮+1</p></li><li><p>第二个循环从1到上一个变量的数,实现递减</p></li><li><p>还需要有个判断,当结果是个位数时打印四个空格,否则输出三个空格</p></li></ol><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="comment">// 判断n的大小</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span> || n &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"范围是1~9，请重新输入"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 从1到n循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 从1到i循环</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum;</span><br><span class="line">                sum = i * j;</span><br><span class="line">                <span class="comment">// 当和是个位数时打印四个空格</span></span><br><span class="line">                <span class="keyword">if</span> (sum &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d*%d=%d   "</span>, j, i, sum);</span><br><span class="line">                    <span class="comment">// 大于个位数时打印三个空格</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d*%d=%d  "</span>, j, i, sum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="统计素数求和"><a href="#统计素数求和" class="headerlink" title="统计素数求和"></a>统计素数求和</h2><ul><li><p>统计给定整数M和N区间内素数的个数,并对它们求和</p></li><li><p>输入M和N,以空格分开,范围是1&lt;=M&lt;=N&lt;=500</p><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路:"></a>思路:</h3><p>之前做过100以内的50个素数,判断方法直接照搬就行</p><p>添加一个求和的操作就行</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="keyword">if</span> (m &lt; <span class="number">1</span> || n &gt; <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请重新输入"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">            m = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> isPrime = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt; i; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % k == <span class="number">0</span>) &#123;</span><br><span class="line">                    isPrime = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断是否为素数</span></span><br><span class="line">            <span class="keyword">if</span> (isPrime) &#123;</span><br><span class="line">                time++;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, time, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="猜数游戏2"><a href="#猜数游戏2" class="headerlink" title="猜数游戏2"></a>猜数游戏2</h2><ul><li><p>猜数游戏是让系统随机产生一个100以内的正整数,用户输入一个数对其猜测,编写程序让输入数字与产生的随机数进行对比较,如果大了提示”Too big!”,如果小了提示”Too small”,相等表示猜到了</p></li><li><p>如果猜到的话,程序结束,并统计猜数的次数</p></li><li><p>如果1次就猜中了就提示”Bingo!”,三次以内猜中该随机数则提示”Lucky You!”,如果超过三次但是在N(N &gt; 3)次以内(包括第N次)猜到该随机数则提示”Good Guess”,如果超过N次都没猜到或者在没到达N次之前用户输入了一个负数,提示”Game Over!”,并结束程序</p></li><li><p>输入格式:在第一行输入两个不超过100的正整数,分别是第一次用户的输入,以及猜测的最大次数N,随后每行给出一个用户的输入</p></li><li><p>输出格式:在一行中输出每次猜测相对应的结果,直到输出才对的结果或是”Game Over”则结束</p><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路:"></a>思路:</h3><p>if 造它就完了,奥利给!</p><ol><li>100以内正整数随机数</li><li>循环次数,判断条件,计数器</li></ol><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"time.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 生成随机数</span></span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">random</span> = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i, j, time;</span><br><span class="line">    <span class="comment">// 第一次猜测以及最大猜测次数输入</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;i, &amp;time);</span><br><span class="line">    <span class="comment">// 循环100次</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">100</span> ; j++) &#123;</span><br><span class="line">        <span class="comment">// 如果满足i是负数或者循环次数比最大猜测数大</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &gt; time) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Game Over!"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="built_in">random</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Too small\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="built_in">random</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Too big\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 相等的各种情况</span></span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) &#123; <span class="comment">// 一次猜中</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Bingo!\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &lt;= <span class="number">3</span>) &#123; <span class="comment">// 三次内</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Lucky You!"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="number">3</span> &amp;&amp; j &lt; time) &#123; <span class="comment">// 超过三次,但是不超过最大猜测数</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Good Guess!"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每轮循环重新输入猜测数</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="前N项和"><a href="#前N项和" class="headerlink" title="前N项和"></a>前N项和</h2><ul><li><p>计算序列<code>2/1+3/2+5/3+8/5+...</code>的前N项之和</p></li><li><p>序列从2开始,每一项的分子是前一项分子与分母的和,分母是前一项的分子</p></li><li><p>输入格式:输入一个正整数N</p></li><li><p>输出格式:输出部分和的值,精确到小数点后两位,计算结果不超过双精度范围</p><h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路:"></a>思路:</h3><ol><li>循环,根据输入值N的范围</li><li>算法:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">j  k</span><br><span class="line">2&#x2F; 1</span><br><span class="line">j &#x3D; t &#x3D; j + k;k &#x3D; j;</span><br><span class="line">3 &#x2F; 2</span><br></pre></td></tr></table></figure><ol start="3"><li>双精度double,小数点后两位%.2f</li></ol><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">double</span> j = <span class="number">2.0</span>, t = <span class="number">0.0</span>, k = <span class="number">1.0</span>, sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum += j / k;</span><br><span class="line">      <span class="comment">// 临时值t</span></span><br><span class="line">        t = j + k;</span><br><span class="line">        k = j;</span><br><span class="line">        j = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="约分最简公式"><a href="#约分最简公式" class="headerlink" title="约分最简公式"></a>约分最简公式</h2><ul><li><p>分数可以表示为”分子/分母”的形式,用户输入一个分数时,将其约分成最简约分式,最简分式指分子和分母不具有继续约分的能力</p></li><li><p>当分子大于分母时,不需要表达成整数又分数的形式,原样输出就行,而当分子分母相等时表示为1/1的分数形式</p></li><li><p>输入格式:输入正整数w分数,分子与分母之间以/分割</p></li><li><p>在scanf的格式字符串值加入/就能让scanf来处理斜杠</p></li><li><p>输出格式:格式与输入相同,对应分数最简分式</p><h3 id="思路-11"><a href="#思路-11" class="headerlink" title="思路:"></a>思路:</h3><p>之前做过<a href="#最大公约数">最大公约数</a>来着</p><h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d/%d"</span>,&amp;x,&amp;y);</span><br><span class="line">    <span class="keyword">int</span> a = x , b = y;</span><br><span class="line">    <span class="keyword">while</span> ( b !=  <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = a % b;</span><br><span class="line">        a = b; <span class="comment">// a为最大公约数</span></span><br><span class="line">        b = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d/%d"</span>,x/a,y/a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多平台hexo</title>
      <link href="/%E5%A4%9A%E5%B9%B3%E5%8F%B0hexo/"/>
      <url>/%E5%A4%9A%E5%B9%B3%E5%8F%B0hexo/</url>
      
        <content type="html"><![CDATA[<p>你不会还在本地部署hexo吧?</p><a id="more"></a><p>众所周知,用hexo+gitpage能搭建很不错的博客,但是有个比较致命的缺点,不方便跨平台部署,当然你也可以选择将其部署至服务器,或者压缩拷贝</p><p>就连backup插件也还是得需要在本地安装nodejs等服务,可谓是让人觉得头疼</p><p>这些问题遇到CI都可以迎刃而解,除了人尽皆知的Travis-CI,另一个不错的方案是使用GithHub提供的Action,相信我,用过它的人都说好</p><p>虽说过程有些麻烦,但是可以一劳永逸的解决多端设备都能快速部署hexo</p><h2 id="创建私有库"><a href="#创建私有库" class="headerlink" title="创建私有库"></a>创建私有库</h2><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/xB5FSA.png" alt="xB5FSA"></p><h3 id="密钥对"><a href="#密钥对" class="headerlink" title="密钥对"></a>密钥对</h3><p>上篇文章讲过啦<a href="https://zhboat.ink/免费图床/#创建密钥对">创建秘钥对</a></p><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><p>在本地博客路径执行<code>hexo clean</code>,然后复制这些文件到一个新目录,<strong>除了node_modules</strong></p><p>新目录中初始化git仓库<code>git init</code>,然后连接至远程仓库<code>git remote add origin 仓库地址</code></p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/PXx9nO.png" alt="PXx9nO"></p><p>然后<code>git push -u origin master</code>上传到远程仓库</p><h3 id="添加Secrets"><a href="#添加Secrets" class="headerlink" title="添加Secrets"></a>添加Secrets</h3><p>在仓库–&gt;setting–&gt;Secrets里添加一个<code>DEPLOY_KEY</code>内容是你本地私钥,用<code>cat ~/.ssh/rsa</code>查看,并整段复制</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/04-10-21-52.png" alt="04-10-21-52"></p><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>点击私有库中的Action</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/AzgMeG.png" alt="AzgMeG"></p><p>然后点击Set up a workflow yourself</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/04-10-21-44.png" alt="04-10-21-44"></p><p>然后复制粘贴到输入框,注意修改<code>user_name: 你的github用户名</code> <code>user_email: 你的github邮箱</code> <code>SOURCE_REPO: &quot;原仓库(gitpage)&quot;</code> <code>SOURCE_BRANCH: &quot;分支&quot;</code> <code>DESTINATION_REPO: &quot;目标仓库&quot;</code> <code>DESTINATION_BRANCH: &quot;分支&quot;</code>这些变量为你自己的信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">deploy</span> <span class="string">hexo</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用缓存加速nodejs的安装,如果超过七天没有访问,就会删除缓存</span></span><br><span class="line"><span class="comment"># npm插件会读取package.json来安装</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="string">!=</span> <span class="string">'true'</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 部署hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">sma11black/hexo-action@v1.0.0</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">user_name:</span> <span class="string">你的github用户名</span></span><br><span class="line">        <span class="attr">user_email:</span> <span class="string">你的github邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步至coding,不需要可以删除这段</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">wei/git-sync@v1.1.2</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">SOURCE_REPO:</span> <span class="string">"原仓库(gitpage)"</span></span><br><span class="line">        <span class="attr">SOURCE_BRANCH:</span> <span class="string">"分支"</span></span><br><span class="line">        <span class="attr">DESTINATION_REPO:</span> <span class="string">"目标仓库"</span></span><br><span class="line">        <span class="attr">DESTINATION_BRANCH:</span> <span class="string">"分支"</span></span><br><span class="line">        <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">args:</span> <span class="string">$SOURCE_REPO</span> <span class="string">$SOURCE_BRANCH</span> <span class="string">$DESTINATION_REPO</span> <span class="string">$DESTINATION_BRANCH</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/Kw70vQ.png" alt="Kw70vQ"></p><p>过一会就能看到Action通过了(我忘记把_config里coding去掉了)</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/H7VH8H.png" alt="H7VH8H"></p><p>当写完workflow后别忘记在本地<code>git pull</code>(,或你在本地写完再<code>git push</code>也是一样)</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>一定要规范_config!!!</strong></p><p><strong>e.g</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:zhboat/zhboat.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="CNAME和README的处理"><a href="#CNAME和README的处理" class="headerlink" title="CNAME和README的处理"></a>CNAME和README的处理</h3><p>CNAME和README直接丢到source文件夹内就行,如果你的README是md格式,请在_config.yml里添加一行<code>skip_render: README.md</code></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>换设备的话只需要从github克隆仓库后就行,无需再安装nodejs</p><p>在source/_posts里新建xx.md,写完文章后push到仓库就能自动部署</p><br><p>其实这样部署有个弊端就是gitpage的commit会清空</p><p>但是懒癌患者也不会去看commit的^ ^</p><br><h3 id="比懒可没人赶得上我"><a href="#比懒可没人赶得上我" class="headerlink" title="比懒可没人赶得上我"></a>比懒可没人赶得上我</h3><p>说起懒,咱就觉得<code>git add .</code> <code>git commit -m</code> <code>git push</code>这三条命令敲下来比<code>hexo g -d</code>来的更麻烦了,这可太不妙了</p><p>脚本可是万能的😉</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/04-10-22-18.png" alt="04-10-22-18"></p><p>新建个sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CURTIME=$(date +<span class="string">"%Y-%m-%d"</span>)-$(<span class="built_in">stat</span> <span class="variable">$BLOG_DIR</span> |awk &#123;<span class="string">'print $11'</span>&#125;)</span><br><span class="line">BLOG_DIR=(<span class="variable">$HOME</span>/Desktop/blog)</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$BLOG_DIR</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"✏️Last updated at: <span class="variable">$CURTIME</span>"</span></span><br><span class="line">git push </span><br><span class="line"></span><br><span class="line">osascript ~/Jio本/tips.scpt</span><br></pre></td></tr></table></figure><p>修改fish的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function push</span><br><span class="line">    sh ~&#x2F;Jio本&#x2F;push.sh</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>用脚本编辑器添加个AppleScript</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display dialog &quot;上传成功&quot; buttons &#123;&quot;OK&quot;&#125; default button 1</span><br></pre></td></tr></table></figure><br><p>巴适得很~ ؏؏☝ᖗ乛◡乛ᖘ☝؏؏</p><br><blockquote><p>参考<a href="https://www.cnblogs.com/deppwang/p/12326906.html" target="_blank" rel="noopener">https://www.cnblogs.com/deppwang/p/12326906.html</a></br></p><p>git-sync:<a href="https://github.com/marketplace/actions/git-sync-action" target="_blank" rel="noopener">https://github.com/marketplace/actions/git-sync-action</a></br></p><p>hexo-action:<a href="https://github.com/marketplace/actions/hexo-action" target="_blank" rel="noopener">https://github.com/marketplace/actions/hexo-action</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(2)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-2/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-2/</url>
      
        <content type="html"><![CDATA[<p>while循环</p><a id="more"></a><p><code>while</code>和<code>if</code>有着相似的用法,但是当需要做很多次的判断时,会使用更高效率的<code>while</code>语句,与<code>if</code>不同的是,<strong>当条件满足判断时,不断重复循环体内的语句</strong></p><h2 id="while格式"><a href="#while格式" class="headerlink" title="while格式"></a>while格式</h2><p><strong>循环体内一定要有改变条件判断的机会</strong>,否则会陷入死循环</p><ol><li>while</li></ol><p>写法与if类似,条件满足就执行表达式的内容,条件不满足时就结束循环,所以当条件不满足时,while内的表达式一次都不会执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( 条件判断 )&#123;</span><br><span class="line">表达式(循环体)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>do while</li></ol><p>虽然看着与while很像,但区别在于do while会在进入循环时不做条件判断,而是在执行完表达式后再检查循环的条件是否满足,如论如何都会进行一次表达式的执行,如果满足则进行下一次循环,不满足时才会结束循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">表达式(循环体)</span><br><span class="line">&#125;<span class="keyword">while</span> (条件判断);</span><br></pre></td></tr></table></figure><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ol><li>取位数</li></ol><p>如果我们输入一串正整数,当机器得到这串数字时,需要得出这串整数一共有多少位,如果使用if进行判断,那么代码会显得十分臃肿且繁琐,先看看用if是如何实现</p><p>if:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>; <span class="comment">// 定义整数x和n</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x); <span class="comment">// 用户输入值为x</span></span><br><span class="line">    n++;<span class="comment">// n自加1,满足0的条件</span></span><br><span class="line">    x /= <span class="number">10</span>;<span class="comment">// 让x数值减少一位</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 判断</span></span><br><span class="line"><span class="comment">  * 当x大于0时，使n的值加1，并减去x的个位数</span></span><br><span class="line"><span class="comment">  * 直至x小于0时,才结束判断,并输出n的值*/</span></span><br><span class="line">    <span class="keyword">if</span> ( x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        n++;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> ( x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            n++;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> ( x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                n++;</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上述代码又啰嗦又麻烦,而且还只能计算到四位数,进而可以使用while来实现</p><p>while:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 循环判断</span></span><br><span class="line"><span class="comment"> * 当x 大于 0时，使n的值加1</span></span><br><span class="line"><span class="comment"> * 然后让x的值除以10（去掉个位数）</span></span><br><span class="line"><span class="comment"> * 直到x不满足x&gt;0这个判断，才会跳出while循环*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    n++;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> ( x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        n++;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do while:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用do-while语句来进行循环的一特点就是</span></span><br><span class="line"><span class="comment"> * 无论如何都会执行一次循环体</span></span><br><span class="line"><span class="comment"> * 所以即便用户输入的值是0，也可以正常计算出位数*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        n++;</span><br><span class="line">    &#125; <span class="keyword">while</span> ( x &gt; <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过举一反三,让负数也计算其位数的话只需要添加个if判断即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 判断x是否大于等于0</span></span><br><span class="line"><span class="comment"> * 如果满足上列条件就进行循环</span></span><br><span class="line"><span class="comment"> * 否则按负数来计算</span></span><br><span class="line"><span class="comment"> * 将x的值变成正整数来继续完成循环体*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            n++;</span><br><span class="line">        &#125; <span class="keyword">while</span> ( x &gt; <span class="number">0</span> );</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        x += +x;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            n ++;</span><br><span class="line">        &#125;<span class="keyword">while</span> ( x &lt; <span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Log2X</li></ol><p>计算x是2的多少次方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义变量x和ret</span></span><br><span class="line"><span class="comment"> * 初始化ret为0</span></span><br><span class="line"><span class="comment"> * 将x的值赋值给b</span></span><br><span class="line"><span class="comment"> * 当x大于1时进入循环体</span></span><br><span class="line"><span class="comment"> * 循环体内x的值为x除2，并让ret加1</span></span><br><span class="line"><span class="comment"> * 当x不满足大于1时退出循环*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> b = x ;</span><br><span class="line">    <span class="keyword">while</span> ( x &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        x /= <span class="number">2</span>;</span><br><span class="line">        ret++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"log2 of %d is %d"</span>, b, ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>倒计时</li></ol><p>输出用户输入到0的所有整数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 初始化coun的值</span></span><br><span class="line"><span class="comment"> * 当count大于0时进入循环体</span></span><br><span class="line"><span class="comment"> * 进入循环体后首先让count减1</span></span><br><span class="line"><span class="comment"> * 而后输出count的值</span></span><br><span class="line"><span class="comment"> * 当count不满足条件判断时结束循环*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;count);</span><br><span class="line">    <span class="keyword">while</span> ( count &gt; <span class="number">0</span> )&#123;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"发射！"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费图床</title>
      <link href="/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>利用<a href="https://github.com" target="_blank" rel="noopener">GitHub</a>+<a href="https://github.com/marketplace/actions/git-sync-action" target="_blank" rel="noopener">repo-sync</a>+jsDelivr+<a href="https://github.com/gee1k/uPic" target="_blank" rel="noopener">uPic</a>搭建的免费图床</p><a id="more"></a><p>鉴于PicGo在我设备上一直出现”上传失败’’的情况,所以我将其换成了uPic,借此写下这篇随记</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>首先创建一个公开项目,可以取任何名称</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/20200326154252.png" alt=""></p><p>这是<a href="https://github.com/zhboat/cdn_pic" target="_blank" rel="noopener">我的项目</a>,欢迎参考</p><h2 id="Git-Sync"><a href="#Git-Sync" class="headerlink" title="Git Sync"></a>Git Sync</h2><p>使用该功能是为了让github项目自动同步到coding或gitee,虽说现在有免费的jsDelivr起到cdn加速作用,但谁能保证这玩意不会哪天突然挂了:|</p><p>咱本着懒癌精神,打算用最自动化的方式来实现,于是咱<del>摸索出</del>偶然间发现了别人项目中的这一十分强大的功能–Action,具体玩法咱就不过多叙述了</p><p>此项目得益于github官方提供的Action服务,在<a href="https://github.com/marketplace" target="_blank" rel="noopener">Marketplace</a>里可以搜索的到,使用起来也是非常的方便</p><p>项目地址: <a href="https://github.com/marketplace/actions/git-sync-action" target="_blank" rel="noopener">git sync</a></p><p>用法(参考官方wiki):</p><p>在本地项目中创建.github/workflows/xxx.yml</p><blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">repo-sync:</span></span><br><span class="line"><span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">repo-sync</span></span><br><span class="line"><span class="attr">uses:</span> <span class="string">wei/git-sync@v1</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">SOURCE_REPO:</span> <span class="string">"源仓库"</span></span><br><span class="line">  <span class="attr">SOURCE_BRANCH:</span> <span class="string">"源分支"</span></span><br><span class="line">  <span class="attr">DESTINATION_REPO:</span> <span class="string">"目标仓库"</span></span><br><span class="line">  <span class="attr">DESTINATION_BRANCH:</span> <span class="string">"目标分支"</span></span><br><span class="line">  <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">with:</span></span><br><span class="line">  <span class="attr">args:</span> <span class="string">$SOURCE_REPO</span> <span class="string">$SOURCE_BRANCH</span> <span class="string">$DESTINATION_REPO</span> <span class="string">$DESTINATION_BRANCH</span></span><br></pre></td></tr></table></figure></blockquote><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/20200326161404.png" alt=""></p><p>由于项目所有人都能看见,为了确保其安全性,建议使用ssh连接项目,私钥储存在<code>项目名称/settings/Secrets</code>,公钥在此添加<a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a></p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/20200326161712.png" alt=""></p><h4 id="创建密钥对"><a href="#创建密钥对" class="headerlink" title="创建密钥对"></a>创建密钥对</h4><p>已经创建了的可以跳过这步</p><p>若提示<code>git@github.com: Permission denied (publickey)</code>可以删除<code>~/.ssh/id_rsa</code>和<code>~/.ssh/id_rsa.pub</code>后重新创建</p><p><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code>创建密钥对,一路回车即可</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/20200326164454.png" alt=""></p><p><code>ssh-agent bash</code></p><p><code>ssh-agent -s</code></p><p><code>ssh-add ~/.ssh/id_rsa</code></p><p><code>cat ~/.ssh/id_rsa.pub</code>将其复制并添加到<a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a></p><p><strong>别忘了gitee或coding也需要部署公钥</strong></p><p><code>ssh -T git@github.com</code>验证是否生效,若出现<code>Hi,xxx!You&#39;ve successfully authenticated</code>即代表成功</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/shotscreens.jpeg" alt=""></p><p><code>cat ~/.ssh/id_rsa</code>将所有内容全都复制并添加到<code>项目/settings/Secrets</code>,名称与git sync项目里变量名<code>SSH_PRIVATE_KEY</code>相同</p><h2 id="uPic"><a href="#uPic" class="headerlink" title="uPic"></a>uPic</h2><p>upic仅支持MacOS,如果其他平台有这个需求,可以使用<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo</a></p><p>从github下载GUI客户端<a href="https://github.com/gee1k/uPic" target="_blank" rel="noopener">https://github.com/gee1k/uPic</a></p><p>在偏好设置里添加github,并修改其相关配置</p><blockquote><p>GitHub配置 </br><br>用户名:    zhboat  <br/><br>仓库名:    cdn_pic  </br><br>Token:   <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">github添加token</a>  </br><br>域名:     可以自定义，如使用cdn加速勾选加速访问即可 </br><br>保存路径:  默认是upic/文件名.后缀名  </br><br><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic@master/upic/2020/A1skxe.png" alt="Upic"></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记(1)</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-1/"/>
      <url>/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<p>if与if判断</p><a id="more"></a><p>基本的if语句由关键字<code>if</code>开头,在括号里的是表示条件的逻辑表达式,在<code>{}</code>之间的若干表达式.如果表示条件的逻辑表达式结果不是零,那么执行后面<code>{}</code>之间的表达式,否则就跳过这些表达式不执行,而继续执行下面的其他语句.</p><h2 id="if-格式"><a href="#if-格式" class="headerlink" title="if 格式"></a>if 格式</h2><ol><li>if&amp;else</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件判断)&#123;</span><br><span class="line">表达式</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="comment">// 否则&#123;</span></span><br><span class="line"> 表达式  </span><br><span class="line">&#125;<span class="comment">// else后的&#123;&#125;可以不需要</span></span><br></pre></td></tr></table></figure><ol start="2"><li>if</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (条件判断)&#123;</span><br><span class="line">表达式</span><br><span class="line">&#125;&#x2F;&#x2F; if后的&#123;&#125;也可以不需要</span><br></pre></td></tr></table></figure><p>值得注意的是,可以使用<a href="#if%E5%B5%8C%E5%A5%97">if嵌套</a></p><p>计算两个值之间的关系判断叫关系运算/比较运算</p><table><thead><tr><th>运算符</th><th align="center">意义</th></tr></thead><tbody><tr><td>==</td><td align="center">相等</td></tr><tr><td>!=</td><td align="center">不相等</td></tr><tr><td>&gt;</td><td align="center">大于</td></tr><tr><td>&gt;=</td><td align="center">大于或等于</td></tr><tr><td>&lt;</td><td align="center">小于</td></tr><tr><td>&lt;=</td><td align="center">小于或等于</td></tr></tbody></table><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><ul><li>关系运算符的优先级比算术运算符低,但是比赋值高</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">4</span> &gt;= <span class="number">5</span> + <span class="number">3</span>;</span><br><span class="line"><span class="comment">// x = ( 4 &gt;= 8)</span></span><br><span class="line"><span class="comment">// x = 0</span></span><br></pre></td></tr></table></figure><ul><li>判断是否相等的<code>==</code>和<code>!=</code>优先级比其他关系运算符低,在连续的关系运算符中,优先级的顺序是自左向右运算.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> &gt; <span class="number">3</span> == <span class="number">6</span> &gt; <span class="number">4</span></span><br><span class="line"><span class="comment">// 1 == 1</span></span><br><span class="line"><span class="number">6</span> &gt; <span class="number">5</span> &gt; <span class="number">4</span></span><br><span class="line"><span class="comment">// 6大于5成立,则其值为1</span></span><br><span class="line"><span class="comment">// 1 大于4不成立.则其值为0</span></span><br></pre></td></tr></table></figure><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ol><li><p><strong>计算找零</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">int</span> price = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> bill = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 让用户输入金额和票面</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入金额："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;price);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入票面："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bill);</span><br><span class="line">  <span class="comment">// 判断,当票面大于或等于金额时,执行找零操作</span></span><br><span class="line">    <span class="keyword">if</span> ( bill &gt;= price )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"应当找您：%d\n"</span>,bill - price);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"您的钱不够"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>计算年龄</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义初始值</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MINOR = <span class="number">35</span>;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 输入年龄</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入您的年龄："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"您的年龄是:%d\n"</span>,age);</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    <span class="keyword">if</span> ( age &lt;= MINOR)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"年轻是美好的\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"年龄决定了您的精神世界，请好好珍惜吧。\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>比较大小</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">int</span> a , b;</span><br><span class="line">    <span class="comment">// 输入整数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入两个整数:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    <span class="keyword">if</span> ( a &gt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="built_in">max</span> = a;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">max</span> = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"大的值是%d\n"</span>,<span class="built_in">max</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而上述代码还可以简写成下面的样子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">int</span> a , b;</span><br><span class="line">    <span class="comment">// 输入整数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入两个整数:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  *将b的值赋值给max,而后进行判断,当a的值大于max时将a的值赋值给max</span></span><br><span class="line"><span class="comment">  *而不满足判断时,直接输出max的值(也就是b的值)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = b;</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    <span class="keyword">if</span> ( a &gt; b )&#123;</span><br><span class="line">        <span class="built_in">max</span> = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"大的值是%d\n"</span>,<span class="built_in">max</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>计算薪水</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 按照薪资标准，加班的时间以1.5倍计算</span></span><br><span class="line"><span class="comment"> * 当用户输入工作时长后，进行判断，如果大于每周标准工作时长则进行计算：每周的工资+加班时间*1.5倍工资</span></span><br><span class="line"><span class="comment"> * 否则计算用户输入工作时长*小时薪资</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> RATE = <span class="number">8.25</span>; <span class="comment">// 每小时8.25块</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> STANDARD = <span class="number">40</span>; <span class="comment">// 一周标准工作时长40小时</span></span><br><span class="line">    <span class="keyword">double</span> pay = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">int</span> hours;</span><br><span class="line">    <span class="comment">// 输入工作时长</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入工作的小时数:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;hours);</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    <span class="keyword">if</span> ( hours &gt; STANDARD )&#123;</span><br><span class="line">        pay = STANDARD * RATE + (hours - STANDARD) * (RATE * <span class="number">1.5</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        pay = hours * RATE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"应付工资：%f"</span>,pay);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>判断成绩</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> PASS = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">int</span> source;</span><br><span class="line">    <span class="comment">// 输入成绩</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入成绩:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;source);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"您输入的成绩是%d\n"</span>,source);</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    <span class="keyword">if</span> ( source &lt; PASS )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"您的成绩不合格！"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"您的成绩是合格的！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"再见"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h2><p>在嵌套中,if没有<code>{}</code>的情况下,else通常是和最近的if匹配</p><p>同时,else不会被代码缩进影响</p><p>所以标准写法还是在if和else后加上<code>{}</code>,哪怕是只有一条语句</p><ol><li><p><strong>判断大小</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a,b,c;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"请输入任意三个整数:"</span>);</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">       <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> ( a &gt; b ) &#123;</span><br><span class="line">           <span class="keyword">if</span> ( a &gt; c )&#123;</span><br><span class="line">               <span class="built_in">max</span> = a;</span><br><span class="line">           &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="built_in">max</span> = c ;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">if</span> ( b &gt; c )&#123;</span><br><span class="line">               <span class="built_in">max</span> = b;</span><br><span class="line">           &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="built_in">max</span> = c;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最大值是：%d"</span>,<span class="built_in">max</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以简化成下面的样子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入任意三个整数:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        <span class="keyword">if</span> (a &gt; c)</span><br><span class="line">            <span class="built_in">max</span> = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">max</span> = c;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b &gt; c)</span><br><span class="line">        <span class="built_in">max</span> = b;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">max</span> = c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最大值是：%d"</span>, <span class="built_in">max</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>级联判断/分段函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,f;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    f = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">if</span> ( x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        f = <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( x == <span class="number">0</span>)&#123;</span><br><span class="line">        f = x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        f = <span class="number">2</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"f=%d"</span>,f);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch语句的作用就是基于计算的跳转,当满足表达式的值之后,程序会跳转到对应的case(<em>分支标号</em>)处</p><p>但分支标号只是作为switch的标记,在switch内的表达式后面如果没有break作为结束,将会继续执行下一个case内的表达式,直至遇到一个break或整个switch执行完毕</p><ol><li><strong>级联与switch</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;type);</span><br><span class="line">    <span class="keyword">if</span> ( type == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"早上好"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( type == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"中午好"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( type == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"晚上好"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"再见！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种代码看上去十分繁琐,使用switch就能轻松实现</p><p>switch的语法与if大同小异,而且代码明了高效率</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (整型变量或表达式)&#123;</span><br><span class="line">    <span class="comment">// xx可以为整型表达式例如1+1,也可以为整型常量</span></span><br><span class="line">    <span class="keyword">case</span> xx;</span><br><span class="line">    <span class="comment">//表达式;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> xx;</span><br><span class="line">      <span class="comment">//表达式;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用switch把上面的if转换成简单易懂的风格就是如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;type);</span><br><span class="line">    <span class="keyword">switch</span>( type )&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"早上好"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"中午好"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"晚上好"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"再见!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>题目-成绩转换</strong></li></ol><blockquote><p>将百分制成绩转换成五分制成绩,并严格遵循如下转换规则:</p><ul><li>大于等于90分为A</li><li>小于90且大于等于80为B</li><li>小于80且大于等于70为C</li><li>小于70且大于等于60为D</li><li>小于60为E</li></ul><p><strong>输出格式</strong></p><p>输入在一行中给出1个整数的百分制成绩</p><p><strong>输出格式</strong></p><p>在一行中输出对应的五分制成绩</p><p><strong>输入样例</strong></p><p>90</p><p><strong>输出样例</strong></p><p>A</p></blockquote><p>解题思路:除了级联if嵌套以外,还可以使用switch来判断并输出,碍于需要判断大小于,所以可以将输入的整数进行<code>/10</code>的操作,只取前1位有效数作为变量,实现代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;score);</span><br><span class="line">  <span class="comment">// 成绩取一位有效数</span></span><br><span class="line">    score /=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">switch</span> (score)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"A"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"B"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"C"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"D"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"E"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此,便满足了题目要求</p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch入教手册</title>
      <link href="/Arch%E5%85%A5%E6%95%99%E6%89%8B%E5%86%8C/"/>
      <url>/Arch%E5%85%A5%E6%95%99%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>记录Arch的安装过程</p><a id="more"></a><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><h3 id="刻录U盘"><a href="#刻录U盘" class="headerlink" title="刻录U盘"></a>刻录U盘</h3><ul><li><p>从网易源或阿里源下载archlinux镜像，使用<a href="http://etcher.io/" target="_blank" rel="noopener">Etcher</a>来刻录镜像到U盘</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/image-20200312182941412.png" alt="image-20200312182941412"></p></li><li><p>到BIOS修改启动顺序，将U盘设置成首位</p></li></ul><h3 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h3><ul><li>使用<code>ip link</code>查看网卡网络连接情况</li><li>开启网卡<code>ip link set 网卡名 up</code></li><li>图形化的WiFi连接界面<code>wifi-menu</code></li><li>给有线网卡分配IP<code>dhcpcd</code></li></ul><h3 id="修改软件源"><a href="#修改软件源" class="headerlink" title="修改软件源"></a>修改软件源</h3><ul><li><p>修改pacman源，<code>vim /etc/pacman.d/mirrorlist</code></p></li><li><p>只保留网易源(也可以选择其他的)，在vim界面输入[:v/163/d]，回车后输入[:x]保存退出</p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/image-20200312200927198.png" alt="image-20200312200927198"></p></li></ul><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><ul><li>查看分区表<code>fdisk -l</code></li><li>给sd*磁盘分区<code>parted /dev/sd*</code></li><li>创建分区表</li></ul><p>UEFI/GPT:<code>(parted) mklabel gpt</code></p><p>BIOS/MBR:<code>(parted) mklabel msdos</code></p><ul><li><p>分区</p><ul><li>UEFI/GPT:<ol><li>创建EFI分区<code>(parted) mkpart ESP fat32 1M 300M</code></li><li>创建Swap分区<code>(parted) mkpart primary linux-swap 300M 8.9G</code></li><li>创建/分区<code>(parted) mkpart primary ext4 8.9G 100%</code></li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/image-20200312204615354.png" alt="image-20200312204615354"></p><ul><li>BIOS/MBR:<ol><li>创建Swap分区<code>(parted) mkpart primary linux-swap 1M 8G</code></li><li>创建/分区<code>(parted) mkpart primary ext4 8G 100%</code></li></ol></li></ul></li><li><p>挂载分区</p><ul><li><p>UEFI/GPT</p><ol><li><p>格式化efi分区<code>mkfs.fat -F32 /dev/sd**</code></p></li><li><p>格式化swap分区<code>mkswap /dev/sd**</code></p></li><li><p>开启swap分区<code>swapon /dev/sd**</code></p></li><li><p>格式化/分区<code>mkfs.ext4 /dev/sd**</code></p></li><li><p>挂载/分区<code>mount /dev/sd** /mnt</code></p></li><li><p>创建efi文件夹<code>mkdir -p /mnt/boot/efi</code></p></li><li><p>挂载efi分区<code>mount /dev/sd** /mnt/boot/efi</code>  </p><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/image-20200312210529474.png" alt="image-20200312210529474"></p></li></ol></li><li><p>BIOS/MBR:</p><ol><li><p>格式化swap分区<code>mkswap /dev/sd**</code></p></li><li><p>开启swap分区<code>swapon /dev/sd**</code></p></li><li><p>格式化/分区<code>mkfs.ext4 /dev/sd**</code></p></li><li><p>挂载/分区<code>mount /dev/sd** /mnt</code></p></li></ol></li></ul></li></ul><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>使用脚本安装系统必要软件包<code>pacstrap /mnt base linux linux-firmware</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/screenshots.png" alt=""></p><h3 id="fstab"><a href="#fstab" class="headerlink" title="fstab"></a>fstab</h3><ul><li>生成fstab<code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></li><li>查看fstab是否正确被写入<code>cat /mnt/etc/fstab</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/20200313175354.png" alt=""></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>切换进Arch<code>arch-chroot /mnt</code></p><h4 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h4><p>一键安装必要软件包vi,vim,网络管理器,Intel核显,sudo,ssh服务,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paman -S vi vim networkmanager dhcpcd intel-ucode sudo openssh</span><br></pre></td></tr></table></figure><h4 id="时区-amp-时间"><a href="#时区-amp-时间" class="headerlink" title="时区&amp;时间"></a>时区&amp;时间</h4><ul><li>设置时区<code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></li><li>开启NTP服务<code>timedatectl set-ntp true</code></li><li>设定硬件时间为UTC<code>hwclock --systohc</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/20200313182206.png" alt=""></p><h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><ul><li>编辑locale.gen<code>vim /etc/locale.gen</code><ul><li>删除<code>en_US.UTF-8 UTF-8</code>,<code>zh_CN.UTF-8 UTF-8</code>,<code>zh_TW.UTF-8 UTF-8</code>前面的#</li></ul></li><li>生成locale信息<code>locale-gen</code></li><li>将系统语言设置成en_US.UTF-8<code>echo &quot;LANG=en_US.UTF-8&quot; &gt;&gt; /etc/locale.conf</code>,并检查是否有误<code>cat /etc/locale.conf</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/20200313191717.png" alt=""></p><h4 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h4><ul><li>修改主机名<code>echo &quot;urname&quot; &gt;&gt; /etc/hostname</code></li><li>修改hosts<code>vim /etc/hosts</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost</span><br><span class="line">127.0.1.1urname.localdomainurname</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/20200313194244.png" alt=""></p><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><ul><li><p>添加一个普通用户<code>useradd -m -g users -G wheel -s /bin/bash urname</code></p></li><li><p>修改root用户和刚刚创建的普通用户密码<code>passwd root</code>,<code>passwd urname</code></p></li><li><p>普通用户使用sudo命令无需输入密码<code>visudo</code>删除<code># %wheel ALL=(ALL) ALL</code>前的#</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/20200313194455.png" alt=""></p><h4 id="Grub引导"><a href="#Grub引导" class="headerlink" title="Grub引导"></a>Grub引导</h4><ul><li><p>安装grub</p><ul><li><p>UEFI/GPT:</p><ol><li>安装grub和efibootmgr软件包<code>pacman -S grub efibootmgr</code></li></ol></li></ul><ol start="2"><li><p>安装grub进efi分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=grub</span><br></pre></td></tr></table></figure><ol start="3"><li>生成grub所需文件<code>grub-mkconfig -o /boot/grub/grub.cfg</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/20200313195530.png" alt=""></p></li></ol><ul><li><p>BIOS/MBR:</p><ol><li>安装grub软件包<code>pacman -S grub</code></li><li>安装grub到磁盘中grub-install –target=i386-pc /dev/sd*`</li><li>生成grub所需文件<code>grub-mkconfig -o /boot/grub/grub.cfg</code></li></ol></li></ul></li></ul><h3 id="结束第一部分安装"><a href="#结束第一部分安装" class="headerlink" title="结束第一部分安装"></a>结束第一部分安装</h3><p><code>exit</code>回到live环境,卸载已挂载的分区<code>umount -R /mnt</code>就能重启了<code>reboot</code></p><h2 id="3-后续"><a href="#3-后续" class="headerlink" title="3. 后续"></a>3. 后续</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ul><li><p>开启NetworkManager服务<code>systemctl start NetworkManager</code>,并设置成开机自启<code>systemctl enable NetworkManager</code></p></li><li><p>查看附近的WiFi<code>nmcli dev wifi</code></p></li><li><p>连接WiFi <code>nmcli dev wifi con wifi名 password WiFi密码</code>(dev是简写的device,con是简写的connect)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic/pictures/nmcli.jpg" alt=""></p><h3 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h3><p>安装xorg相关服务<code>pacman -S xorg xorg-server xorg-xinit</code></p><h4 id="Deepin"><a href="#Deepin" class="headerlink" title="Deepin"></a>Deepin</h4><p>安装deepin,附加组件可以安装deepin-extra<code>pacman -S deepin</code></p><p>启用deepin桌面<code>systemctl enable lightdm &amp;&amp; systemctl start lightdm</code></p><p><img src="https://www.deepin.org/wp-content/uploads/2016/12/desktop-zh.png" alt="">从官网偷的图:P</p><h4 id="Gnome"><a href="#Gnome" class="headerlink" title="Gnome"></a>Gnome</h4><p>安装gnome,附加组件可以安装gnome-extra,包含一些游戏等,还可以安装美化工具gnome-tweaks<code>pacman -S gnome</code></p><p>启用gnome桌面<code>systemctl enable gdm &amp;&amp; systemctl enable gdm</code></p><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h2><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>ssh的坑 不能直接连接,修改<code>/etc/ssh/sshd_config</code>,然后重启ssh服务<code>systemctl restart sshd</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LoginGraceTime 120</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">StrictModes yes</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhboat/cdn_pic//pictures/20200313201643.png" alt=""></p><hr><p>未完待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Arch </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
